{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/PotDisplayController.js",
    "src/PotInputController.js",
    "src/PottingController.js",
    "src/PottingData.js",
    "src/PottingSet.js",
    "src/PottingSetList.js",
    "src/Tabs.js",
    "src/Utils.js",
    "src/ViewController.js",
    "src/app.js",
    "src/data/Terminal.js"
  ],
  "names": [],
  "mappingsvrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpp
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function()\n{\n\tmodule.exports = function PotDisplayController( _domElement )\n\t{\n\t\tvar _potContents = {};\t//cache of all .potContents elements\n\t\tvar _displayNode = _domElement;\n\n\t\tvar alreadyCreated = document.querySelectorAll(\"#pottingDisplay\").length !==0;\n\n\t\tif ( alreadyCreated )\n\t\t{\n\t\t\t//do stuff...\n\t\t\t//return false;\n\t\t}\n\n\t\t//init();\n\n\t\treturn {\n\t\t\tinit\t\t: init,\n\t\t\tupdatePot\t: updatePot,\n\t\t\treset\t\t: reset,\n\t\t\tclear\t\t: clear \n\t\t};\t\n\n\t\t\n\n\t\tfunction init( allPotData )\n\t\t{\n\t\t\t//clear();\n\n\t\t\t//_displayNode = document.createElement('div');\n\t\t\t//_displayNode.id = \"pottingDisplay\";\n\n\t\t\tallPotData.forEach( function( potData, i )\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\t<div class=\"potContainer\" id=\"pot1\">\n\t                <h1>7600</h1>\n\t                <div class=\"pot\">\n\t                    <div class=\"potContents\"></div>\n\t                </div>    \n\t            </div>\n\t            */\n\n\t\t\t\tvar container \t\t= document.createElement('div');\n\t\t\t\tvar header \t\t\t= document.createElement('h1');\n\t\t\t\tvar pot \t\t\t= document.createElement('div');\n\t\t\t\tvar potContents \t= document.createElement('div');\n\n\t\t\t\tcontainer.className = \"potContainer\";\n\t\t\t\tcontainer.id \t\t= \"pot\" + ( i + 1 );\n\n\t\t\t\theader.innerHTML\t= potData.capacity;\n\n\t\t\t\tpot.className \t\t= \"pot\";\n\n\t\t\t\tpotContents.className = \"potContents\";\n\t\t\t\tpotContents.setAttribute('data-product', 'none');\n\t\t\t\t_potContents[ '' + ( i + 1 ) ] = potContents;\n\t\t\t\t\n\t\t\t\tcontainer.appendChild( header );\n\t\t\t\tcontainer.appendChild( pot );\n\t\t\t\tpot.appendChild( potContents );\n\n\t\t\t\t_displayNode.appendChild( container );\n\t\t\t});\n\n\t\t\treturn _displayNode;\n\t\t\t\n\t\t\t//intoDomNode.appendChild( potDisplay );\n\t\t} \n\n\t    function updatePot( potData )\n        {\n        \tconsole.log( \"PotDisplayController::Filling \" + potData.id + \" with \" + potData.contents + \"/\" + potData.capacity + \" of \" + potData.product );\n\n            var potId = potData.id;\n\n            //var potDisplay = document.getElementById( 'pot' + potData.id );\n            \n            var potContents = _potContents[ potData.id ];//potDisplay.querySelector(\".potContents\");\n\n            potContents.setAttribute( \"data-product\", potData.product );\n\n            potContents.style.height = Math.round( potData.contents / potData.capacity * 100 ) + \"%\";\n        }\n\n\t\tfunction update( withProductData )\n\t\t{\n\n\t\t}\n\n\t\tfunction clear()\n\t\t{\n\t\t\t_potContents = [];\n\n\t\t\tif ( _displayNode )\n\t\t\t{\n\t\t\t\twhile( _displayNode.firstChild )\n\t\t\t\t{\n\t\t\t\t\t_displayNode.removeChild( _displayNode.firstChild );\n\t\t\t\t}\n\t\t\t\t//_displayNode.parentNode.removeChild( _displayNode );\t\n\t\t\t}\n\t\t}\n\n\t\tfunction reset()\n\t\t{\n\t\t\tfor ( var potId in _potContents )\n\t\t\t{\n\t\t\t\tif ( _potContents.hasOwnProperty( potId ))\n\t\t\t\t{\t\n\t\t\t\t\t_potContents[ potId ].setAttribute('data-product','none');\n\t\t\t\t\t_potContents[ potId ].style.height = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n}());",
    "(function()\n{\n\tmodule.exports = function PotInputController( usingDom, availableProducts )\n\t{\n\t\tvar _domElement \t= usingDom;\n\t\tvar _inputGroups\t= [].slice.call( _domElement.querySelectorAll( \"[id^='input']\" ));\n\t\tvar _products\t\t= availableProducts;\n\n\t\tvar testElement = _domElement.querySelector( \"[id=input_1051510]\");\n\t\tvar textElement = testElement.querySelector(\"[id^=product]\");\n\n\t\tconsole.log(textElement);\n\n\t\tinit( availableProducts );\n\n\t\tif ( _inputGroups.length === 0 )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::No inputs\");\n\t\t}\n\n\t\treturn { \tinit: init,\n\t\t\t\t\tupdateProductList : updateProductList };\n\n\t\tfunction getEnteredProductAmounts()\n        {\n        \tvar selectedProducts = _inputGroups.map( function getProductAmounts( inputGroup ) \n                {\n                    return {    id      :inputGroup.getAttribute(\"id\").split(\"_\")[1], \n                                amount  :inputGroup.querySelector(\"[id^=productInput\").value };\n                })\n                .filter( function removeZeroValues( inputValues )\n                {\n                    if ( inputValues.amount > 0 ) return true;\n                });\n\n            return selectedProducts;\n        }\n\n        function updateProductList( availableProducts )\n        {\n\n        \tvar usedProductIds = availableProducts.reduce( function getProductIds( list, nextProduct )\n\t\t\t{\n\t\t\t\treturn list + ' ' + nextProduct.id;\n\t\t\t},'');\n\n        \tconsole.log(\"PotInputController:: checking inputs against \" + usedProductIds );\n\n        \t_inputGroups.forEach( function hideUnusedProducts( inputGroup )\n\t\t\t{\n\t\t\t\tvar forProduct \t\t= inputGroup.id.split('_')[1];\n\t\t\t\tvar txtInput        = inputGroup.querySelector(\"[id^=productInput]\");\n            \ttxtInput.value      = 0;\n\n\n\t\t\t\tif ( usedProductIds.indexOf( forProduct ) < 0 )\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Hiding \" + forProduct );\n\t\t\t\t\tinputGroup.style.display = \"none\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Showing \" + forProduct );\n\t\t\t\t\tinputGroup.style.display = \"block\";\n\t\t\t\t}\n\t\t\t});\n        }\n\n\t\tfunction init( availableProducts )\n\t\t{\n\t\t\tupdateProductList( availableProducts );\n\n\t\t\t_inputGroups.forEach( function( inputGroup )\n\t\t\t{\n\t\t\t\tinputGroup.addEventListener(\"click\", function( evt )\n\t\t            {\n\t\t            \tvar isFillBtn\t= evt.target.id.split(\"_\")[0] === \"btnFill\";\n\t\t            \tvar isClearBtn \t= evt.target.id.split(\"_\")[0] === \"btnClear\";\n\n\t\t                if ( isFillBtn )\n\t\t                {\tevt.stopPropagation();\n\t\t                \tonFillTanker( this );\t                    \n\t\t                \treturn;\n\t\t                }\n\n\t\t                if ( isClearBtn )\n\t\t                {\n\t\t                \tevt.stopPropagation();\n\t\t                \tonClearProduct( this );\n\t\t                \treturn;\n\t\t                }\n\t\t            });\n\t\t\t});\n\t\t}\n\n\t\tfunction onFillTanker( selectedInputGroup )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::onFillTanker()\");\n\t\t\tvar txtInput        = selectedInputGroup.querySelector(\"[id^=productInput]\");\n            txtInput.value      = 0;\n            var productToFill   = selectedInputGroup.id.split( \"_\" )[ 1 ];\n            var otherProducts\t= getEnteredProductAmounts();\n\n            var detail\t\t\t= { enteredProducts:otherProducts, productToFill:productToFill };\n\n\t\t\tvar fillEvent \t\t= new CustomEvent(\"fillTanker\",{ detail:detail });\n\n            _domElement.dispatchEvent( fillEvent );\n\t\t}\n\n\t\tfunction onClearProduct( selectedInputGroup )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::onClearProduct()\");\n\t\t\tvar txtInput        = selectedInputGroup.querySelector(\"[id^=productInput]\");\n            txtInput.value      = 0;\n\n            var enteredProducts\t= getEnteredProductAmounts();\n\n            var evt;\n            var detail = { enteredProducts : enteredProducts };\n\n            if ( enteredProducts.length === 0 )\n            {\n            \tevt = new CustomEvent(\"clearTanker\");\n            }\n            else\n            {\n            \tevt = new CustomEvent(\"potTanker\", { detail:detail } );\n            }\n\n            _domElement.dispatchEvent( evt );\t\n\t\t}\n\t};\n}());",
    "\n(function()\n{\n\t\"use strict\";\n\n\tvar Utils \t\t\t= require(\"./Utils.js\");\n\tvar PottingSetList\t= require(\"./PottingSetList.js\");\n\n\tmodule.exports = function PottingController( listOfPots )\n\t{\n\t    var _basePots   = listOfPots;\n\t    var _activePots,_products;\n\t    \n\t    return {\n\t        doPottingWithProduct   : doPottingWithProduct,\n\t        usedPots :_basePots\n\t    };\n\n\t    function putProductIntoPots( product )\n\t    {\n\t    \t\t\n\t    }\n\n\t    function doPottingWithProduct( withProduct, withPots )\n\t    {\n\t        _activePots             = withPots;        \n\n\t        var productRemainder    = {};\n\t        var pottingUsed         = [];\n\t        var usedPottingSet      = '';\n\n\t         var spaceAvailable     = _activePots.reduce( function ( count, potData )\n\t         {\n\t            return count + potData.capacity;\n\t         }, 0 );\n\n\t         if ( spaceAvailable < withProduct.amount )\n\t         {\n\t            withProduct.amount = spaceAvailable;\n\t            productRemainder[ withProduct.id ] = withProduct.amount - spaceAvailable;\n\t         }\n\n\t        usedPottingSet = getBestPotsForProduct( _activePots, withProduct );\n\n\t        pottingUsed.push( usedPottingSet );\n\n\t        return pottingUsed;\n\t    }\n\n\t    function getBestPotsForProduct( withPots, product )\n\t    {\n\t        var allPotPermutations  = Utils.getPotPermutations( withPots );\n\n\t        var allPottingSets      = new PottingSetList( allPotPermutations );\n\t        //var allPottingSets      = new PottingSetList( [JSON.parse(JSON.stringify(withPots)), JSON.parse( JSON.stringify( withPots.reverse() ))] );\n\t        var uniquePottingSets   = allPottingSets.sendProductToPottingSets( product );\n\n\t        var validPottingSets    = [];\n\t        var invalidPottingSets  = [];\n\n\t        var bestPottingSet      = allPottingSets.getBestPottingSet();\n\n\t        console.log( \"Best Potting Set: \");\n\t        \n\t        return bestPottingSet;\n\t    }\n\t};\n}());",
    "(function()\n{\n\tvar PRODUCT_DATA_URL \t= './resources/products.json?' + Math.random().toFixed(4);\n\t\n\tvar Terminal \t\t\t= require('./data/Terminal.js');\n\n\tvar availableProducts \t= [   \t{id:1051510, density:0.83,name:\"Blah\"},\n\t                                {id:1051485, density:0.83,name:\"Blah\"},\n\t                                {id:1051643, density:0.83,name:\"Blah\"}] ;\n\n    var products    \t\t= [     {id:\"1051512\", amount:22800, pottingUsed:[] },\n\t\t\t\t\t\t\t\t\t{id:\"1051510\", amount:12000, pottingUsed:[] }];\n\n    var basePots    \t\t= [     {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n\t\t                            {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n\t\t                            {id:3,capacity:7000, contents:0, product:\"\", minimum:3500},\n\t\t                            {id:4,capacity:7600, contents:0, product:\"\", minimum:3800},\n\t\t                            {id:5,capacity:6000, contents:0, product:\"\", minimum:3000},\n\t\t                            {id:6,capacity:7000, contents:0, product:\"\", minimum:6000}];\n\n\tvar testPots\t\t    =  [    {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800}];\n\n\tvar testProduct \t\t=       {id:\"1051510\", amount:18000, pottingUsed:[] };\n\tvar _terminals;\n\n\tmodule.exports = PottingData;\n\n\tfunction PottingData()\n\t{\t\n\t\t_terminals = [];\n\n\t\treturn { \tloadProductData: loadProductData,\n\t\t\t\t\tgetTerminalData: getTerminalData };\n\t}\n\n\tfunction getTerminalData( terminalName )\n\t{\n\t\treturn _terminals[terminalName];\n\t}\n\n\tfunction onProductDataLoaded( data, onComplete )\n\t{\n\t\tvar terminalData = JSON.parse( data );\n\t\tconsole.log('onProductDataLoaded');\n\t\tconsole.log(terminalData);\n\t\tfor ( var id in terminalData )\n\t\t{\n\t\t\tif ( terminalData.hasOwnProperty( id ) )\n\t\t\t{\n\t\t\t\tvar terminal = new Terminal( id, terminalData[id]);\n\t\t\t\t_terminals[id] = terminal;\t\n\t\t\t\tconsole.log( _terminals[id].toString());\n\t\t\t}\n\t\t}\n\n\t\tif ( onComplete )\tonComplete();\n\t}\n\n\tfunction loadProductData( onComplete )\n\t{\n\t\tvar xobj = new XMLHttpRequest();\n        xobj.overrideMimeType( \"application/json\" );\n    \txobj.open( 'GET', PRODUCT_DATA_URL, true ); \n    \t\n    \txobj.onreadystatechange = function () \n    \t{\n\n          if ( xobj.readyState === 4 && xobj.status === 200 ) {\n            onProductDataLoaded( xobj.responseText, onComplete );\n          }\n    \t};\n\n    \txobj.send( null );  \n\t}\n\n\n}());\n",
    "(function()\n{\n\t\"use strict\";\n\tvar PotSorter = require(\"./Utils.js\").PotSorter;\n\t\n\tmodule.exports = function PottingSet( fromPotArr )\n\t{\n\t    var _availablePots = fromPotArr;\n\n\t    return {\n\t        putProductIntoPots      : putProductIntoPots,\n\t        getUsedPotsById         : getUsedPotsById,\n\t        willPotWithinRules      : willPotWithinRules,\n\t        getRemainingSpace       : getRemainingSpace,\n\t        getUsedPots             : getUsedPots,\n\t        isValid                 : isValid\n\t    };\n\n\t    function getUsedPots()\n\t    {\n\t        return _availablePots;\n\t    }\n\n\t    function isValid()\n\t    {\n\t        var valid = _availablePots.reduce( checkPotCapacityAgainstContents, true );\n\n\t        if ( valid )\n\t        {\n\t            return true;\n\t        } \n\t        else\n\t        {\n\t            fillLastPot();\n\t        }\n\t    }\n\n\t    function checkPotCapacityAgainstContents( isWithinRules, potData )\n\t    {\n\t        return isWithinRules && potData.capacity > potData.minimum;\n\t    }\n\n\t    function fillSinglePot( withProduct, pot )\n\t    {\n\t        console.log(\"Filling Pot \" + pot.id + \" with \" + withProduct.amount + \" of \" + withProduct.id );\n\n\t        pot.product = withProduct.id;\n\n\t        if ( pot.capacity > withProduct.amount )\n\t        {\n\t            pot.contents = withProduct.amount;\n\n\t            return withProduct.amount;\n\t        }\n\t        else\n\t        {\n\t            pot.contents = pot.capacity;\n\t            withProduct.amount -= pot.capacity;\n\t            return pot.capacity;\n\t        }\n\t    }\n\n\t    function putProductIntoPots( product )\n\t    {\n\t        var usedPots = [];\n\n\t        _availablePots.forEach( function( nextPot )\n\t        {\n\t            if ( product.amount > 0 ) \n\t            {\n\t                product.amount -= fillSinglePot( product, nextPot );\n\t                usedPots.push( nextPot );\n\t            }\t        \n\t        });\n\n\t        _availablePots = usedPots;\n\t        //console.log( _availablePots );\n\n\t       // return product;        \n\t    }\n\n\t    function getRemainingSpace()\n\t    {\n\t        return _availablePots.reduce( function( count, nextPot )\n\t        {\n\t           //return count + nextPot.getCapacity() - nextPot.getContents();\n\t           return count + nextPot.capacity - nextPot.contents;\n\t        }, 0);\n\t    }\n\n\t    function getUsedPotsById()\n\t    {\n\t        _availablePots.sort( PotSorter.sortPotsById );\n\t        \n\t        return _availablePots.reduce( function( idList , nextPot  )\n\t        {\n\t            //return idList + nextPot.getId();\n\t            return idList + nextPot.id;\n\t        }, '');\n\t    }\n\n\t    function willPotWithinRules( potCombination )\n\t    {\n\t        var potToFill;\n\t        var otherPots = potCombination.filter( function( potData )\n\t        {\n\t            if ( potData.contents > potData.minimum )\n\t            {\n\t                return true;\n\t            }\n\t            else\n\t            {\n\t                potToFill = potData;\n\t            }\n\t        });\n\n\t        //count how much product is over each pots minimum amount. This will give us the total we can move to the last pot\n\t        var available = otherPots.reduce( function( productAvailable, nextPotToCheck )\n\t        {\n\t            return productAvailable + ( nextPotToCheck.contents - nextPotToCheck.minimum );\n\t        }, 0 );\n\n\t        //check there's enough product to move away from other pots\n\t        if ( potToFill.contents + available >= potToFill.minimum ) \n\t        {\n\t            //If product available then move from other pots into the last pot\n\t            fillLastPot( potToFill, otherPots );\n\n\t            return true;\n\t        }\n\t        else\n\t        {\n\t            return false;   //cannot pot within rules\n\t        }\n\t    }\n\n\t    function IsGreaterThan( checkAgainst )\n\t    {\n\t        var mustBeGreaterThan = checkAgainst;\n\n\t        return function( amountToCheck )\n\t        {\n\t            return amountToCheck > checkAgainst;\n\t        };\n\t    }\n\n\t    function fillLastPot( lastPot, remainingPots )\n\t    {\n\t        var needed = lastPot.minimum - lastPot.contents;\n\n\t        var amountToMove;\n\t        var helperPot;\n\n\t        remainingPots.sort( PotSorter.sortPotsByAmountMoveable );\n\n\t        for ( var i = 0; i < remainingPots.length; i++ )\n\t        {\n\t            helperPot = remainingPots[i];\n\n\t            if ( helperPot.contents - needed > helperPot.minimum )\n\t            {\n\t                amountToMove = helperPot.contents - ( helperPot.contents - needed );\n\t            } \n\t            else\n\t            {\n\t                //amountToMove = helperPot.contents - ( helperPot.contents - helperPot.minimum );\n\t                amountToMove = helperPot.contents  - helperPot.minimum;\n\t            }\n\n\t            needed              -= amountToMove;\n\t            helperPot.contents  -= amountToMove;\n\t            lastPot.contents    += amountToMove;\n\n\t            if ( lastPot.contents >= lastPot.minimum ) \n\t            {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t};\n}());",
    "(function()\n{\n\t\"use strict\";\n\t\n\tvar PotSorter = require('./Utils.js').PotSorter;\n\tvar PottingSet = require('./PottingSet.js');\n\n\tmodule.exports = function PottingSetList( withListOfPots )\n\t{\n\t   var _listOfPottingSets = withListOfPots.map( function( potArray ) \n\t    {\n\t        return new PottingSet( potArray );\n\t    });\n\n\t    return {\n\t        sendProductToPottingSets    : sendProductToPottingSets,\n\t        getBestPottingSet:getBestPottingSet \n\t    };\n\n\t    function removeDuplicates()\n\t    {\n\t        var uniquePotCombos = [];\n\t        var listOfPotCombos = {};\n\n\t        var debugCounter = 0;\n\n\t        _listOfPottingSets.forEach ( function( pottingSet )\n\t        {\n\t            debugCounter++;\n\n\t            var usedPotIds = pottingSet.getUsedPotsById();\n\n\t            if ( listOfPotCombos[ usedPotIds ] )\n\t            {\n\t                listOfPotCombos[ usedPotIds ].push( pottingSet );\n\t            }\n\t            else\n\t            {\n\t                listOfPotCombos[ usedPotIds ] = [ pottingSet ];\n\t                uniquePotCombos.push( pottingSet );\n\t            }   \n\t        });\n\n\t        _listOfPottingSets = uniquePotCombos;\n\t    }\n\n\t    function sendProductToPottingSets( product, potCombinations )\n\t    {        \n\t        _listOfPottingSets.forEach( function( pottingSet )\n\t        {  \n\t        \tpottingSet.putProductIntoPots( {id:product.id, amount:product.amount });\n\t        });\n\n\t        removeDuplicates();\n\t        removeInvalid();\n\n\t        //getBestPottingSet();\n\t        _listOfPottingSets.sort( PotSorter.sortPotSetsByRemainder );\n\n\t        return _listOfPottingSets;\n\t    }\n\n\t    function removeInvalid()\n\t    {\n\t        _listOfPottingSets = _listOfPottingSets.filter( function( pottingSet )\n\t        {\n\t            if ( pottingSet.isValid() )\n\t            {\n\t                return true;\n\t            }\n\t        });\n\t    }\n\n\t    function getBestPottingSet()\n\t    {\n\t        _listOfPottingSets.sort( PotSorter.sortPotSetsByRemainder );\n\t        return _listOfPottingSets[ 0 ];\n\t    }\n\t};\n}());",
    "(function()\n{\n\tmodule.exports = Tabs;\n\n\tfunction Tabs( domNode )\n\t{\n\t\tvar _tabs = [];\n\t\tvar _domElement;\n\n\t\tinit( domNode );\n\n\t\t//return { init: init };\n\n\t\tfunction init( withDom )\n\t\t{\n\t\t\t_domElement = withDom;\n\n\t\t\t_tabs = [].slice.call( _domElement.querySelectorAll('li'));\n\n\t\t\t_tabs.forEach( function( tab )\n\t\t\t{\n\t\t\t\ttab.addEventListener('click', function( evt )\n\t\t\t\t{\n\t\t\t\t\tonTabClicked( evt );\t\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tfunction onTabClicked( evt )\n\t\t{\n\t\t\t_tabs.forEach( function( tab )\n\t\t\t{\n\t\t\t\ttab.className = '';\n\t\t\t});\n\n\t\t\tevt.currentTarget.className = 'tabActive';\n\t\t\tvar terminal = evt.currentTarget.id.split(\"_\")[1];\n\n\t\t\tvar changeEvent = new CustomEvent(\"onChangeTerminal\",{detail:terminal});\n\n\t\t\t_domElement.dispatchEvent( changeEvent );\n\t\t}\n\t}\n}());",
    "(function()\n{\n\t\"use strict\";\n\t\n\texports.getPotPermutations =  function getPotPermutations( fromList )\n\t{\n\t    var permArr     = [];\n\t    var usedChars   = [];\n\n\t    function permute( input ) \n\t    {\n\t        var i, ch;\n\n\t        for (i = 0; i < input.length; i++ ) \n\t        {\n\t            ch = input.splice(i, 1)[0];\n\t            usedChars.push(ch);\n\n\t            if ( input.length === 0 ) \n\t            {\n\t                permArr.push( JSON.parse( JSON.stringify( usedChars )));\n\t            }\n\n\t            permute( input );\n\t            \n\t            input.splice(i, 0, ch);\n\t            usedChars.pop();\n\t        }\n\t        \n\t        return permArr;\n\t    }\n\n\t    return permute( fromList );\n\t};\n\n\texports.PotSorter = {\n\n\t    sortPotsByAmountMoveable: function sortPotSetByAmountMoveable( aPot, bPot )\n\t    {\n\t        return ( bPot.capacity - bPot.minimum ) - ( aPot.capacity - aPot.minimum );\n\t    },\n\n\t    sortPotsById: function sortPotSetById( a, b )\n\t    {        \n\t        return a.id - b.id;\n\t    },\n\n\t    sortPotSetsByRemainder: function sortPotSetsByRemainder( aPottingList, bPottingList  )\n\t    {   \n\t        return aPottingList.getRemainingSpace() - bPottingList.getRemainingSpace();\n\t    }\n\t};\n}());",
    "(function()\n{\n\tmodule.exports = ViewController;\n\n\tvar PotDisplayController    = require(\"./PotDisplayController.js\");\n    var PotInputController      = require(\"./PotInputController.js\");\n    var Tabs                    = require('./Tabs.js');\n\n\tvar _formController;\n\tvar _pottingDisplay;\n\tvar _tabController;\n\tvar _tabs;\n\n\tvar _domElements;\n\n\tfunction ViewController( withDom )\n\t{\n\t\t_domElements = withDom;\n\n\t\treturn {init: init, updateTerminal:updateTerminal};\n\t}\n\n\tfunction updateTerminal( withPots, withProducts )\n\t{\n\t\t_formController.updateProductList( withProducts );\n\t\t_pottingDisplay.clear();\n\t\t_pottingDisplay.init( withPots );\n\t}\n\n\tfunction init( usingPots, usingProducts )\n\t{\n\t\t//var arrayCopy       = Array.prototype.slice;\n\n        var formNode        = _domElements.querySelector(\"#productInputs\");\n\t\tvar potDisplayNode  = _domElements.querySelector(\"#pottingDisplay\");\n\t\tvar tabsNode\t\t= _domElements.querySelector(\".tabs\");\n\n\t\ttabsNode.addEventListener(\"onChangeTerminal\", onChangeTerminal );\n\n        _formController \t= new PotInputController( formNode, usingProducts );\n\t\t_pottingDisplay     = new PotDisplayController( potDisplayNode );\n\t\t_tabs \t\t\t\t= new Tabs( tabsNode );\n       \n        formNode.addEventListener(\"clearTanker\", onClearTankerSelected );\n\t}\n\n\tfunction onChangeTerminal( evt )\n\t{\n\t\tconsole.log(\"Changed!\" + evt.detail);\n\t}\n\n\n\tfunction onClearTankerSelected( evt )\n\t{\n\t    console.log(\"Removing Product from tanker. Products Left: \");\n\t    _pottingDisplay.reset();\n\t}\n}());\n",
    "/* globals PottingSetList:false, PottingController:false \n# sourceMappingURL=./app.js.map\n*/\n(function(){\n            var potInput;\n            var amount;\n            \n            var permMax     = 2;\n            var permCurrent = 0;\n            var currentProduct;            \n\n            var PottingController       = require(\"./PottingController.js\");\n            var PotDisplayController    = require(\"./PotDisplayController.js\");\n            var PotInputController      = require(\"./PotInputController.js\");\n            var Tabs                    = require('./Tabs.js');\n            var PottingData             = require('./PottingData.js');\n            var ViewController          = require(\"./ViewController.js\");\n\n            var potter;\n            var formController;\n            var pottingDisplay;\n            var tabController;\n            var data;\n            var uiRefs                  = {};\n            var view;\n\n            /*var availableProducts = [   {id:1051510, density:0.83,name:\"Blah\"},\n                                        {id:1051485, density:0.83,name:\"Blah\"},\n                                        {id:1051643, density:0.83,name:\"Blah\"}] ;\n\n            var products    = [     {id:\"1051512\", amount:22800, pottingUsed:[] },\n                                    {id:\"1051510\", amount:12000, pottingUsed:[] }];\n\n            var basePots    = [     {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:3,capacity:7000, contents:0, product:\"\", minimum:3500},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800},\n                                    {id:5,capacity:6000, contents:0, product:\"\", minimum:3000},\n                                    {id:6,capacity:7000, contents:0, product:\"\", minimum:6000}];\n\n            var testPots    =  [    {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800}];\n\n            var testProduct =       {id:\"1051510\", amount:18000, pottingUsed:[] };\n\n            var uiElements  = {};*/\n\n            window.onload   = function()\n            {\n                //potter          = new PottingController( basePots );\n                \n                data            = new PottingData();\n                view            = new ViewController( document.querySelector(\".content\") );\n\n                data.loadProductData( onProductDataLoaded );\n                \n                document.addEventListener(\"fillTanker\", onFillTankerSelected );\n                document.addEventListener(\"potTanker\", onPotTankerSelected );\n                document.querySelector(\".tabs\").addEventListener(\"onChangeTerminal\", onChangeTerminal );\n\n                console.log(\"loading\");\n\n                //initUI();\n            };\n\n            function onChangeTerminal( evt )\n            {\n                console.log(\"Changing terminal to \" + evt.detail );\n                var terminal = data.getTerminalData(evt.detail);\n\n                view.updateTerminal( terminal.pots, terminal.products );\n            }\n\n            function onProductDataLoaded( )\n            {\n                console.log(\"Product Data Loaded!!\");\n                var terminal = data.getTerminalData(\"bramhall\");\n\n                view.init( terminal.pots, terminal.products );\n            }\n\n            function onFillTankerSelected( evt )\n            {\n                console.log(\"Filling Tanker With: \" + evt.detail.productToFill + \". Other Products: \");\n                console.table( evt.detail.enteredProducts );\n            }\n\n            function getPotString( pots )\n            {\n                return pots.reduce(function( debugString, potData )\n                {   \n                    return debugString+ \"[\" + potData.id +\"]:\" + potData.contents + \"/\" + potData.capacity + \" \" + potData.product;\n                },'');\n            }\n\n            function onPotTankerSelected( evt )\n            {\n                /*\n                console.log(\"Potting Tanker With: \");\n\n                var products = evt.detail.enteredProducts;\n\n                console.table( evt.detail.enteredProducts );\n\n                var availablePots = basePots.slice();\n                var usedPottingSets;\n                var bestPottingSet;\n                var usedPotIds;\n\n                var filledPotsToShow;\n\n                pottingDisplay.reset();\n\n                products.every( function( productData )\n                {\n                    console.log(\"Available Pots: \" + getPotString(availablePots));\n\n                    if ( availablePots.length < 1 )\n                    {\n                        return false;\n                    }\n\n                    console.log(\"Next product. Potting \" + productData.amount + \" of \" + productData.id );\n\n                    usedPottingSets     = potter.doPottingWithProduct( productData, availablePots.slice() );\n                    bestPottingSet      = usedPottingSets[0];\n                    usedPotIds          = bestPottingSet.getUsedPotsById();\n\n                    availablePots       = availablePots.filter( function getRemainingPots( potData )\n                    {\n                        if (  usedPotIds.indexOf( potData.id ) === -1 )\n                        {\n                            return true;\n                        }\n                    });\n\n                    filledPotsToShow = bestPottingSet.getUsedPots();\n\n                    filledPotsToShow.forEach( function( singlePotData )\n                    {\n                        pottingDisplay.updatePot( singlePotData );\n                    });\n\n                    return true;\n                });\n                */\n            }\n\n            function onClearTankerSelected( evt )\n            {\n                console.log(\"Removing Product from tanker. Products Left: \");\n                pottingDisplay.reset();\n                \n            }\n\n            function initUI()\n            {\n                /*var arrayCopy       = Array.prototype.slice;\n\n                var formNode        = document.querySelector(\"#productInputs\");\n                formController  = PotInputController( formNode, availableProducts );\n\n                formNode.addEventListener(\"fillTanker\", onFillTankerSelected );\n                formNode.addEventListener(\"potTanker\", onPotTankerSelected );\n                formNode.addEventListener(\"clearTanker\", onClearTankerSelected );\n\n                var potDisplayNode  = document.querySelector(\"#pottingDisplay\");\n                pottingDisplay      = PotDisplayController( potDisplayNode );\n\n                pottingDisplay.init( basePots );*/\n            }\n\n\n\n}());            ",
    "(function()\n{\t\n\n            /*var basePots    = [     {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:3,capacity:7000, contents:0, product:\"\", minimum:3500},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800},\n                                    {id:5,capacity:6000, contents:0, product:\"\", minimum:3000},\n                                    {id:6,capacity:7000, contents:0, product:\"\", minimum:6000}];*/\n\n\tmodule.exports = Terminal;\n\n\tfunction Terminal( id, data )\n\t{\n\t\tthis.name \t\t= id;\n\t\tthis.pots \t\t= [];\n\t\tthis.products \t= {};\n\n\t\tthis.potIds \t= '';\n\t\tthis.productIds = '';\n\n\t\tfor ( var i = 0; i < data.pot_configs[0].pots.length; i++ )\n\t\t{\n\t\t\tthis.pots.push({\tid: i+1,\n\t\t\t\t\t\t\t\tcapacity:this.potifyNumber( data.pot_configs[0].pots[i] ),\n\t\t\t\t\t\t\t\tcontents:0,\n\t\t\t\t\t\t\t\tproduct:'',\n\t\t\t\t\t\t\t\tminimum:this.potifyNumber( data.pot_configs[0].potMinimums[ i ] )\n\t\t\t\t\t\t\t});\n\n\t\t\tthis.potIds += data.pot_configs[0].pots[i];\n\t\t}\n\n\t\tthis.products = [];//data.products;\n\n\t\tfor ( var product in data.products )\n\t\t{\n\t\t\tif ( data.products.hasOwnProperty(product))\n\t\t\t{\n\t\t\t\tthis.products.push({id:product, name:data.products[product].name,density:data.products[product].density });\n\t\t\t\tthis.productIds += product + \" \";\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n\t//Convert 3 to 3000, 69 to 6900 etc\n\tTerminal.prototype.potifyNumber = function( number )\n\t{\n\t\tif ( String( number ).length === 4 ) return number;\n\n\t\treturn Math.ceil( Number('.' + number ).toFixed(4) * 10000 );\n\t};\n\n\tTerminal.prototype.toString = function()\n\t{\n\t\tvar s = \"-------\" + this.name +\"-------\\n\";\n\t\ts+= \"Pots: \" + this.potIds + \"\\n\";\n\t\ts+= \"Products: \" + this.productIds + \"\\n\";\n\t\t\n\t\treturn s;\n\t};\n}());"
  ]
}