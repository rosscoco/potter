{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/PotDisplayController.js",
    "src/PotInputController.js",
    "src/PottingController.js",
    "src/PottingSet.js",
    "src/PottingSetList.js",
    "src/Utils.js",
    "src/app.js"
  ],
  "names": [],
  "mappingsnnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function()\n{\n\tmodule.exports = function PotDisplayController( _domElement )\n\t{\n\t\tvar _potContents = [];\t//cache of all .potContents elements\n\t\tvar _displayNode = _domElement;\n\n\t\tvar alreadyCreated = document.querySelectorAll(\"#pottingDisplay\").length !==0;\n\n\t\tif ( alreadyCreated )\n\t\t{\n\t\t\t//do stuff...\n\t\t\t//return false;\n\t\t}\n\n\t\t//init();\n\n\t\treturn {\n\t\t\tinit\t: init\n\t\t};\n\n\t\tfunction init( allPotData )\n\t\t{\n\t\t\t//clear();\n\n\t\t\t//_displayNode = document.createElement('div');\n\t\t\t//_displayNode.id = \"pottingDisplay\";\n\n\t\t\tallPotData.forEach( function( potData, i )\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\t<div class=\"potContainer\" id=\"pot1\">\n\t                <h1>7600</h1>\n\t                <div class=\"pot\">\n\t                    <div class=\"potContents\"></div>\n\t                </div>    \n\t            </div>\n\t            */\n\n\t\t\t\tvar container \t\t= document.createElement('div');\n\t\t\t\tvar header \t\t\t= document.createElement('h1');\n\t\t\t\tvar pot \t\t\t= document.createElement('div');\n\t\t\t\tvar potContents \t= document.createElement('div');\n\n\t\t\t\tcontainer.className = \"potContainer\";\n\t\t\t\tcontainer.id \t\t= \"pot\" + i;\n\n\t\t\t\theader.innerHTML\t= potData.capacity;\n\n\t\t\t\tpot.className \t\t= \"pot\";\n\n\t\t\t\tpotContents.className = \"potContents\";\n\t\t\t\tpotContents.setAttribute('data-product', 'none');\n\t\t\t\t_potContents.push( potContents );\n\t\t\t\t\n\t\t\t\tcontainer.appendChild( header );\n\t\t\t\tcontainer.appendChild( pot );\n\t\t\t\tpot.appendChild( potContents );\n\n\t\t\t\t_displayNode.appendChild( container );\n\t\t\t});\n\n\t\t\treturn _displayNode;\n\t\t\t\n\t\t\t//intoDomNode.appendChild( potDisplay );\n\n\t\t} \n\n\t    function updatePot( potID, potData )\n        {\n        \tconsole.log( \"Filling \" + potData.id + \" with \" + potData.contents + \"/\" + potData.capacity + \" of \" + potData.product );\n\n            var potId = potData.id;\n\n            //var potDisplay = document.getElementById( 'pot' + potData.id );\n            \n            var potContents = _potContents[ potData.id ];//potDisplay.querySelector(\".potContents\");\n\n            potContents.setAttribute( \"data-product\", potData.product );\n\n            potContents.style.height = Math.round( potData.contents / potData.capacity * 100 ) + \"%\";\n        }\n\n\t\tfunction update( withProductData )\n\t\t{\n\n\t\t}\n\n\t\tfunction clear()\n\t\t{\n\t\t\t_potContents = [];\n\n\t\t\tif ( _displayNode )\n\t\t\t{\n\t\t\t\t_displayNode.parentNode.removeChild( _displayNode );\t\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tfunction reset()\n\t\t{\n\t\t\t_potContents.forEach( function( potDOMDisplay )\n\t\t\t{\n\t\t\t\tpotDOMDisplay.setAttribute('data-product','none');\n\t\t\t\tpotDOMDisplay.style.height = 0;\n\t\t\t});\n\t\t}\n\t};\n\n}());",
    "(function()\n{\n\tmodule.exports = function PotInputController( usingDom, availableProducts )\n\t{\n\t\t\n\n\t\t\n\n\t\tvar _domElement \t= usingDom;\n\t\tvar _inputGroups\t= [].slice.call( _domElement.querySelectorAll( \"[id^='input']\" ));\n\t\tvar _products\t\t= availableProducts;\n\n\t\tvar testElement = _domElement.querySelector( \"[id=input_1051510]\");\n\t\tvar textElement = testElement.querySelector(\"[id^=product]\");\n\n\t\tconsole.log(textElement);\n\n\t\tinit( availableProducts );\n\n\t\tif ( _inputGroups.length === 0 )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::No inputs\");\n\t\t}\n\n\t\treturn { init: init };\n\n\t\tfunction getEnteredProductAmounts()\n        {\n        \tvar selectedProducts = _inputGroups.map( function getProductAmounts( inputGroup ) \n                {\n                    return {    id      :inputGroup.getAttribute(\"id\").split(\"_\")[1], \n                                amount  :inputGroup.querySelector(\"[id^=productInput\").value };\n                })\n                .filter( function removeZeroValues( inputValues )\n                {\n                    if ( inputValues.amount > 0 ) return true;\n                });\n\n            return selectedProducts;\n        }\n\n\t\tfunction init( availableProducts )\n\t\t{\n\t\t\tvar usedProductIds = availableProducts.reduce( function getProductIds( list, nextProduct )\n\t\t\t{\n\t\t\t\treturn list + ' ' + nextProduct.id;\n\t\t\t},'');\n\n\t\t\tconsole.log(\"PotInputController:: checking inputs against \" + usedProductIds );\n\n\t\t\t_inputGroups.forEach( function hideUnusedProducts( inputGroup )\n\t\t\t{\n\t\t\t\tvar forProduct \t\t= inputGroup.id.split('_')[1];\n\t\t\t\tvar txtInput        = inputGroup.querySelector(\"[id^=productInput]\");\n            \ttxtInput.value      = 0;\n\n\n\t\t\t\tif ( usedProductIds.indexOf( forProduct ) < 0 )\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Hiding \" + forProduct );\n\t\t\t\t\tinputGroup.style.display = \"none\";\n\t\t\t\t}\n\n\t\t\t\tinputGroup.addEventListener(\"click\", function( evt )\n\t\t            {\n\t\t            \tvar isFillBtn\t= evt.target.id.split(\"_\")[0] === \"btnFill\";\n\t\t            \tvar isClearBtn \t= evt.target.id.split(\"_\")[0] === \"btnClear\";\n\n\t\t                if ( isFillBtn )\n\t\t                {\tevt.stopPropagation();\n\t\t                \tonFillTanker( this );\t                    \n\t\t                \treturn;\n\t\t                }\n\n\t\t                if ( isClearBtn )\n\t\t                {\n\t\t                \tevt.stopPropagation();\n\t\t                \tonClearProduct( this );\n\t\t                \treturn;\n\t\t                }\n\t\t            });\n\t\t\t});\n\t\t}\n\n\t\tfunction onFillTanker( selectedInputGroup )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::onFillTanker()\");\n\t\t\tvar txtInput        = selectedInputGroup.querySelector(\"[id^=productInput]\");\n            txtInput.value      = 0;\n            var productToFill   = selectedInputGroup.id.split( \"_\" )[ 1 ];\n            var otherProducts\t= getEnteredProductAmounts();\n\n            var detail\t\t\t= { enteredProducts:otherProducts, productToFill:productToFill };\n\n\t\t\tvar fillEvent \t\t= new CustomEvent(\"fillTanker\",{ detail:detail });\n\n            _domElement.dispatchEvent( fillEvent );\n\t\t}\n\n\t\tfunction onClearProduct( selectedInputGroup )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::onClearProduct()\");\n\t\t\tvar txtInput        = selectedInputGroup.querySelector(\"[id^=productInput]\");\n            txtInput.value      = 0;\n\n            var enteredProducts\t= getEnteredProductAmounts();\n\n            var evt;\n            var detail = { enteredProducts : enteredProducts };\n\n            if ( enteredProducts.length === 0 )\n            {\n            \tevt = new CustomEvent(\"clearTanker\");\n            }\n            else\n            {\n            \tevt = new CustomEvent(\"potTanker\", { detail:detail } );\n            }\n\n            _domElement.dispatchEvent( evt );\n\t\t}\n\t};\n}());",
    "\n(function()\n{\n\t\"use strict\";\n\n\tvar Utils \t\t\t= require(\"./Utils.js\");\n\tvar PottingSetList\t= require(\"./PottingSetList.js\");\n\n\tmodule.exports = function PottingController( listOfPots )\n\t{\n\t    var _basePots   = listOfPots;\n\t    var _activePots,_products;\n\t    \n\t    return {\n\t        doPottingWithProduct   : doPottingWithProduct,\n\t        usedPots :_basePots\n\t    };\n\n\t    function putProductIntoPots( product )\n\t    {\n\t    \t\t\n\t    }\n\n\t    function doPottingWithProduct( withProduct, withPots )\n\t    {\n\t        _activePots             = withPots;        \n\n\t        var productRemainder    = {};\n\t        var pottingUsed         = [];\n\t        var usedPottingSet      = '';\n\n\t         var spaceAvailable     = _activePots.reduce( function ( count, potData )\n\t         {\n\t            return count + potData.capacity;\n\t         }, 0 );\n\n\t         if ( spaceAvailable < withProduct.amount )\n\t         {\n\t            withProduct.amount = spaceAvailable;\n\t            productRemainder[ withProduct.id ] = withProduct.amount - spaceAvailable;\n\t         }\n\n\t        usedPottingSet = getBestPotsForProduct( _activePots, withProduct );\n\n\t        pottingUsed.push( usedPottingSet );\n\n\t        return pottingUsed;\n\t    }\n\n\t    function getBestPotsForProduct( withPots, product )\n\t    {\n\t        var allPotPermutations  = Utils.getPotPermutations( withPots );\n\n\t        //var allPottingSets      = new PottingSetList( allPotPermutations );\n\t        var allPottingSets      = new PottingSetList( [JSON.parse(JSON.stringify(withPots)), JSON.parse( JSON.stringify( withPots.reverse() ))] );\n\t        var uniquePottingSets   = allPottingSets.sendProductToPottingSets( product );\n\n\t        var validPottingSets    = [];\n\t        var invalidPottingSets  = [];\n\n\t        var bestPottingSet      = allPottingSets.getBestPottingSet();\n\n\t        console.log( \"Best Potting Set: \");\n\t        \n\t        return bestPottingSet;\n\t    }\n\t};\n}());",
    "(function()\n{\n\t\"use strict\";\n\tvar PotSorter = require(\"./Utils.js\").PotSorter;\n\t\n\tmodule.exports = function PottingSet( fromPotArr )\n\t{\n\t    var _availablePots = fromPotArr;\n\n\t    return {\n\t        putProductIntoPots      : putProductIntoPots,\n\t        getUsedPotsById         : getUsedPotsById,\n\t        willPotWithinRules      : willPotWithinRules,\n\t        getRemainingSpace       : getRemainingSpace,\n\t        getUsedPots             : getUsedPots,\n\t        isValid                 : isValid\n\t    };\n\n\t    function getUsedPots()\n\t    {\n\t        return _availablePots;\n\t    }\n\n\t    function isValid()\n\t    {\n\t        var valid = _availablePots.reduce( checkPotCapacityAgainstContents, true );\n\n\t        if ( valid )\n\t        {\n\t            return true;\n\t        } \n\t        else\n\t        {\n\t            fillLastPot();\n\t        }\n\t    }\n\n\t    function checkPotCapacityAgainstContents( isWithinRules, potData )\n\t    {\n\t        return isWithinRules && potData.capacity > potData.minimum;\n\t    }\n\n\t    function fillSinglePot( withProduct, pot )\n\t    {\n\t        console.log(\"Filling Pot \" + pot.id + \" with \" + withProduct.amount + \" of \" + withProduct.id );\n\t        pot.product = withProduct.id;\n\n\t        if ( pot.capacity > withProduct.amount )\n\t        {\n\t            pot.contents = withProduct.amount;\n\t            withProduct.amount = 0;\n\t        }\n\t        else\n\t        {\n\t            pot.contents = pot.capacity;\n\t            withProduct.amount -= pot.capacity;\n\t        }\n\t    }\n\n\t    function putProductIntoPots( product )\n\t    {\n\t        var usedPots = [];\t\n\n\t        _availablePots.forEach( function( nextPot )\n\t        {\n\t            if ( product.amount > 0 ) \n\t            {\n\t                fillSinglePot( product, nextPot );\n\t                usedPots.push( nextPot );\n\t            }\n\t            \n\n\t        });\n\n\t        _availablePots = usedPots;\n\t        console.log( _availablePots );\n\n\t       // return product;        \n\t    }\n\n\t    function getRemainingSpace()\n\t    {\n\t        return _availablePots.reduce( function( count, nextPot )\n\t        {\n\t           //return count + nextPot.getCapacity() - nextPot.getContents();\n\t           return count + nextPot.capacity - nextPot.contents;\n\t        }, 0);\n\t    }\n\n\t    function getUsedPotsById()\n\t    {\n\t        _availablePots.sort( PotSorter.sortPotsById );\n\t        \n\t        return _availablePots.reduce( function( idList , nextPot  )\n\t        {\n\t            //return idList + nextPot.getId();\n\t            return idList + nextPot.id;\n\t        }, '');\n\t    }\n\n\t    function willPotWithinRules( potCombination )\n\t    {\n\t        var potToFill;\n\t        var otherPots = potCombination.filter( function( potData )\n\t        {\n\t            if ( potData.contents > potData.minimum )\n\t            {\n\t                return true;\n\t            }\n\t            else\n\t            {\n\t                potToFill = potData;\n\t            }\n\t        });\n\n\t        //count how much product is over each pots minimum amount. This will give us the total we can move to the last pot\n\t        var available = otherPots.reduce( function( productAvailable, nextPotToCheck )\n\t        {\n\t            return productAvailable + ( nextPotToCheck.contents - nextPotToCheck.minimum );\n\t        }, 0 );\n\n\t        //check there's enough product to move away from other pots\n\t        if ( potToFill.contents + available >= potToFill.minimum ) \n\t        {\n\t            //If product available then move from other pots into the last pot\n\t            fillLastPot( potToFill, otherPots );\n\n\t            return true;\n\t        }\n\t        else\n\t        {\n\t            return false;   //cannot pot within rules\n\t        }\n\t    }\n\n\t    function IsGreaterThan( checkAgainst )\n\t    {\n\t        var mustBeGreaterThan = checkAgainst;\n\n\t        return function( amountToCheck )\n\t        {\n\t            return amountToCheck > checkAgainst;\n\t        };\n\t    }\n\n\t    function fillLastPot( lastPot, remainingPots )\n\t    {\n\t        var needed = lastPot.minimum - lastPot.contents;\n\n\t        var amountToMove;\n\t        var helperPot;\n\n\t        remainingPots.sort( PotSorter.sortPotsByAmountMoveable );\n\n\t        for ( var i = 0; i < remainingPots.length; i++ )\n\t        {\n\t            helperPot = remainingPots[i];\n\n\t            if ( helperPot.contents - needed > helperPot.minimum )\n\t            {\n\t                amountToMove = helperPot.contents - ( helperPot.contents - needed );\n\t            } \n\t            else\n\t            {\n\t                //amountToMove = helperPot.contents - ( helperPot.contents - helperPot.minimum );\n\t                amountToMove = helperPot.contents  - helperPot.minimum;\n\t            }\n\n\t            needed              -= amountToMove;\n\t            helperPot.contents  -= amountToMove;\n\t            lastPot.contents    += amountToMove;\n\n\t            if ( lastPot.contents >= lastPot.minimum ) \n\t            {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t};\n}());",
    "(function()\n{\n\t\"use strict\";\n\t\n\tvar PotSorter = require('./Utils.js').PotSorter;\n\tvar PottingSet = require('./PottingSet.js');\n\n\tmodule.exports = function PottingSetList( withListOfPots )\n\t{\n\t   var _listOfPottingSets = withListOfPots.map( function( potArray ) \n\t    {\n\t        return new PottingSet( potArray );\n\t    });\n\n\t    return {\n\t        sendProductToPottingSets    : sendProductToPottingSets,\n\t        getBestPottingSet:getBestPottingSet \n\t    };\n\n\t    function removeDuplicates()\n\t    {\n\t        var uniquePotCombos = [];\n\t        var listOfPotCombos = {};\n\n\t        var debugCounter = 0;\n\n\t        _listOfPottingSets.forEach ( function( pottingSet )\n\t        {\n\t            debugCounter++; \n\n\t            var usedPotIds = pottingSet.getUsedPotsById();\n\n\t            if ( listOfPotCombos[ usedPotIds ] )\n\t            {\n\t                listOfPotCombos[ usedPotIds ].push( pottingSet );\n\t            }\n\t            else\n\t            {\n\t                listOfPotCombos[ usedPotIds ] = [ pottingSet ];\n\t                uniquePotCombos.push( pottingSet );\n\t            }   \n\t        });\n\n\t        _listOfPottingSets = uniquePotCombos;\n\t    }\n\n\t    function sendProductToPottingSets( product, potCombinations )\n\t    {        \n\t        _listOfPottingSets.forEach( function( pottingSet )\n\t        {  \n\t            pottingSet.putProductIntoPots( {id:product.id, amount:product.amount });\n\t            console.log( pottingSet.getUsedPots() );\n\t        });\n\n\t        \n\n\t        removeDuplicates();\n\t        removeInvalid();\n\n\t        //getBestPottingSet();\n\t        _listOfPottingSets.sort( PotSorter.sortPotSetsByRemainder );\n\n\t        return _listOfPottingSets;\n\t    }\n\n\t    function removeInvalid()\n\t    {\n\t        _listOfPottingSets = _listOfPottingSets.filter( function( pottingSet )\n\t        {\n\t            if ( pottingSet.isValid() )\n\t            {\n\t                return true;\n\t            }\n\t        });\n\t    }\n\n\t    function getBestPottingSet()\n\t    {\n\t        _listOfPottingSets.sort( PotSorter.sortPotSetsByRemainder );\n\t        return _listOfPottingSets[ 0 ];\n\t    }\n\t};\n}());",
    "(function()\n{\n\t\"use strict\";\n\t\n\texports.getPotPermutations =  function getPotPermutations( fromList )\n\t{\n\t    var permArr     = [];\n\t    var usedChars   = [];\n\n\t    function permute( input ) \n\t    {\n\t        var i, ch;\n\n\t        for (i = 0; i < input.length; i++ ) \n\t        {\n\t            ch = input.splice(i, 1)[0];\n\t            usedChars.push(ch);\n\n\t            if ( input.length === 0 ) \n\t            {\n\t                permArr.push( JSON.parse( JSON.stringify( usedChars )));\n\t            }\n\n\t            permute( input );\n\t            \n\t            input.splice(i, 0, ch);\n\t            usedChars.pop();\n\t        }\n\t        \n\t        return permArr;\n\t    }\n\n\t    return permute( fromList );\n\t};\n\n\texports.PotSorter = {\n\n\t    sortPotsByAmountMoveable: function sortPotSetByAmountMoveable( aPot, bPot )\n\t    {\n\t        return ( bPot.capacity - bPot.minimum ) - ( aPot.capacity - aPot.minimum );\n\t    },\n\n\t    sortPotsById: function sortPotSetById( a, b )\n\t    {        \n\t        return a.id - b.id;\n\t    },\n\n\t    sortPotSetsByRemainder: function sortPotSetsByRemainder( aPottingList, bPottingList  )\n\t    {   \n\t        return aPottingList.getRemainingSpace() - bPottingList.getRemainingSpace();\n\t    }\n\t};\n}());",
    "/* globals PottingSetList:false, PottingController:false \n# sourceMappingURL=./app.js.map\n*/\n(function(){\n            var potInput;\n            var amount;\n            \n            var permMax     = 2;\n            var permCurrent = 0;\n            var currentProduct;\n\n            var PottingController       = require(\"./PottingController.js\");\n            var PotDisplayController    = require(\"./PotDisplayController.js\");\n            var PotInputController      = require(\"./PotInputController.js\");\n\n            var controller;\n\n            var uiRefs      = {};\n\n            var availableProducts = [   {id:1051510, density:0.83,name:\"Blah\"},\n                                        {id:1051485, density:0.83,name:\"Blah\"},\n                                        {id:1051643, density:0.83,name:\"Blah\"}] ;\n\n            var products    = [     {id:\"1051512\", amount:22800, pottingUsed:[] },\n                                    {id:\"1051510\", amount:12000, pottingUsed:[] }];\n\n            var basePots    = [     {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:3,capacity:7000, contents:0, product:\"\", minimum:3500},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800},\n                                    {id:5,capacity:6000, contents:0, product:\"\", minimum:3000},\n                                    {id:6,capacity:7000, contents:0, product:\"\", minimum:6000}];\n\n            var testPots    =  [    {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800}];\n\n            var testProduct =       {id:\"1051510\", amount:18000, pottingUsed:[] };\n\n            var uiElements  = {};\n\n            window.onload   = function()\n            {\n                controller = new PottingController( basePots );\n\n                console.log(\"loading\");\n                initUI();\n            };\n\n            function onFillTankerSelected( evt )\n            {\n                console.log(\"Filling Tanker With: \" + evt.detail.productToFill + \". Other Products: \");\n                console.table( evt.detail.enteredProducts );\n            }\n\n            function onPotTankerSelected( evt )\n            {\n                console.log(\"Potting Tanker With: \");\n                console.table( evt.detail.enteredProducts );\n            }\n\n            function onClearTankerSelected( evt )\n            {\n                console.log(\"Removing Product from tanker. Products Left: \");\n                console.table( evt.detail.enteredProducts );  \n            }\n\n            function initUI()\n            {\n                var arrayCopy       = Array.prototype.slice;\n\n                var formNode        = document.querySelector(\"#productInputs\");\n                var formController  = PotInputController( formNode, availableProducts );\n\n                formNode.addEventListener(\"fillTanker\", onFillTankerSelected );\n                formNode.addEventListener(\"potTanker\", onPotTankerSelected );\n                formNode.addEventListener(\"clearTanker\", onClearTankerSelected );\n\n                var potDisplayNode  = document.querySelector(\"#potDisplay\");\n                var potDisplay      = PotDisplayController( potDisplayNode );\n\n\n\n\n                /*formDisplay.addEventListener(\"onFillTankerWithProduct\", onFillTankerWithProduct );\n\n                uiElements.pottingButtons      = arrayCopy.call( document.querySelectorAll(\".btn_fillTanker\"));\n                uiElements.productInputSets    = arrayCopy.call( document.querySelectorAll(\".productInputSet\"));\n                //uiElements.potDisplays         = arrayCopy.call( document.querySelectorAll(\"div[id*='pot'\"));\n                \n\n                document.querySelector(\"#wrapper\").appendChild( domelement );\n\n                uiElements.productInputSets.forEach( function( inputSet )\n                {\n                    inputSet.addEventListener(\"click\", function( evt )\n                    {\n                        if ( evt.target && evt.target.className === \"btn_fillTanker\" )\n                        {\n                            //remove any input values from the selected input set as we are filling the tanker to capacity, not by the entered value\n                            var txtInput        = this.querySelector(\".txt_inputAmount\");\n                            //txtInput.value      = 0;\n                            var productToFill   = evt.target.getAttribute( \"id\" ).split( \"_\" )[ 1 ];\n\n                            fillTankerWithProduct( productToFill );\n                        }\n                    });\n                });\n            }\n\n\n\n            function getEnteredProductAmounts( ignoreProduct )\n            {\n                var selectedProducts = uiElements.productInputSets.map( function getProductAmounts( inputGroup ) \n                    {\n                        return {    id      :inputGroup.getAttribute(\"id\").split(\"_\")[1], \n                                    amount  :inputGroup.querySelector(\".txt_inputAmount\").value };\n                    })\n                    .filter( function removeZeroValues( inputValues )\n                    {\n                        if ( inputValues.amount > 0 ) return true;\n                    });\n\n                return selectedProducts;\n            }\n\n            function getRemainingPots( fromListOfPots, usedPotIds )\n            {\n                return fromListOfPots.filter( function removeUsedPots( potData )\n                {\n                    if (  usedPotIds.indexOf( potData.id ) === -1 )\n                    {\n                        return true;\n                    }\n                });\n            }\n\n            function fillTankerWithProduct( productToFill )\n            {\n                resetPotDisplays();\n\n                var selectedProducts    = getEnteredProductAmounts();\n                var usedPottingSets \t= [];\n\n                var availablePots = basePots.slice();\n                var bestPottingSet;\n                \n                selectedProducts.every( function( productData )\n                {\n                    if ( availablePots.length < 1 )\n                    {\n                        return false;\n                    }\n\n                    usedPottingSets     = controller.doPottingWithProduct( productData, availablePots );\n                    bestPottingSet      = usedPottingSets[0];\n                    availablePots       = getRemainingPots( availablePots, bestPottingSet.getUsedPotsById() );\n                });\n                \n                var usedPotIds          = usedPottingSets.reduce( function( potIdList, pottingSet )\n                                            {\n                                                return potIdList + pottingSet.getUsedPotsById();\n                                            },'');\n                    \n                var remainingPots       = basePots.filter( function( pot )\n                                            {\n                                                return usedPotIds.indexOf( pot.id ) === -1;\n                                            });\n\n\n                var bestPotting = usedPottingSets[0].getUsedPots();\n\n                bestPotting.forEach( showPottingData );\n\n                //var fillPottingController = new PottingController( remainingPots );\n\n                /*usedPottingSets.forEach( function( pottingSetForProduct )\n                {\n                    var potsUsedForProduct = pottingSetForProduct.data;\n                    potsUsedForProduct.forEach( showPottingData );\n                });*/\n            }\n\n            function potSingleProduct( product, usingPots )\n            {\n\n            }\n\n            function sortAscending( a, b)\n            {\n\n            }\n            /*\n            *@param potData - object containign pot id, product and volume\n            */\n            function showPottingData( potData )\n            {\n                console.log( \"Filling \" + potData.id + \" with \" + potData.contents + \"/\" + potData.capacity + \" of \" + potData.product );\n\n                var potId = potData.id;\n\n                var potDisplay = document.getElementById( 'pot' + potData.id );\n                \n                var potContents = potDisplay.querySelector(\".potContents\");\n\n                potContents.setAttribute( \"data-product\", potData.product );\n\n                potContents.style.height = Math.round( potData.contents / potData.capacity * 100 ) + \"%\";\n            }\n\n            function potProducts()\n            {\n                var usedPottingSets = controller.doPottingWithProducts( products );\n                var potData;\n                \n                usedPottingSets.forEach( function( pottingSet )\n                {\n                    potData = pottingSet.getUsedPots();\n                    potData.forEach( showPottingData );\n                });\n            }\n\n            function getPotDisplays()\n            {\n                var potNodeList = document.querySelectorAll(\"div [id*]=pot\");    //find all divs with *pot* in the id.\n\n                var forEach = Array.prototype.forEach;\n\n                forEach.call( potNodeList, function( potDiv ) \n                {\n\n                });\n            }\n\n            function resetPotDisplays()\n            {\n                uiElements.potDisplays.forEach( function( potDomElement )\n                {\n                    potDomElement.querySelector('.potContents').setAttribute('data-product','');\n\n                    /*var classes = potDomElement.querySelector('.potContents').className.split(' ').filter( function( className )\n                    {\n                        return className.indexOf('product') !== 0;  //remove product-****** from class name\n                    })*/\n                });\n            }\n}());            "
  ]
}