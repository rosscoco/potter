{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/PotDisplayController.js",
    "src/PotInputController.js",
    "src/PottingController.js",
    "src/PottingData.js",
    "src/PottingResults.js",
    "src/PottingSet.js",
    "src/PottingSetList.js",
    "src/Tabs.js",
    "src/Utils.js",
    "src/ViewController.js",
    "src/app.js",
    "src/data/Terminal.js"
  ],
  "names": [],
  "mappingsnzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvrntn
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "(function()\n{\n\tmodule.exports = function PotDisplayController( domElement )\n\t{\n\t\tvar _potContents \t= {};\t//cache of all .potContents elements\n\t\tvar _container\t\t= domElement;\n\t\tvar _displayNode;// \t= domElement;\n\n\t\tvar alreadyCreated = document.querySelectorAll(\"#pottingDisplay\").length !==0;\n\n\t\tif ( alreadyCreated )\n\t\t{\n\t\t\t//do stuff...\n\t\t\t//return false;\n\t\t}\n\n\t\t//init();\n\n\t\treturn {\n\t\t\tinit\t\t: init,\n\t\t\tupdatePot\t: updatePot,\n\t\t\treset\t\t: reset,\n\t\t\tclear\t\t: clear \n\t\t};\t\n\n\t\tfunction init( allPotData )\n\t\t{\n\t\t\t//clear();\n\n\t\t\t_displayNode = document.createElement('div');\n\t\t\t_displayNode.className = \"pottingDisplay\";\n\n\t\t\tvar lastnode;\n\t\t\tallPotData.forEach( function( potData, i )\n\t\t\t{\n\t\t\t\t/*\n\t\t\t\t<div class=\"potContainer\" id=\"pot1\">\n\t                <h1>7600</h1>\n\t                <div class=\"pot\">\n\t                    <div class=\"potContents\"></div>\n\t                </div>    \n\t            </div>\n\t            */\n\n\t            /*\n\t\t\t\t<div class=\"potContainer\" id=\"pot1\">\n\t                <h1>7600</h1>\n\t                <div class=\"pot\">\n\t                    <div class=\"potContents\"></div>\n\t                </div> \n\t                <h1>7600</h1>   \n\t            </div>\n\t            */\n\n\t\t\t\tvar container \t\t= document.createElement('div');\n\t\t\t\tvar txtContents \t= document.createElement('h2');\n\t\t\t\tvar pot \t\t\t= document.createElement('div');\n\t\t\t\tvar potContents \t= document.createElement('div');\n\t\t\t\tvar txtCapacity \t= document.createElement('h2');\n\n\t\t\t\tcontainer.className = \"potContainer\";\n\t\t\t\tcontainer.id \t\t= \"pot\" + ( i + 1 );\n\n\t\t\t\ttxtContents.innerHTML = 0;\n\t\t\t\ttxtCapacity.innerHTML = potData.capacity;\n\n\n\t\t\t\ttxtContents.className = 'potText';\n\t\t\t\ttxtCapacity.className = 'potText';\n\n\t\t\t\tpot.className \t\t= \"pot\";\n\n\t\t\t\tpotContents.className = \"potContents\";\n\t\t\t\tpotContents.setAttribute('data-product', 'none');\n\n\t\t\t\t_potContents[ '' + ( i + 1 ) ] = { pot:potContents, text:txtContents };\n\t\t\t\t\n\t\t\t\tcontainer.appendChild( txtContents );\n\t\t\t\tcontainer.appendChild( pot );\n\t\t\t\tpot.appendChild( potContents );\n\t\t\t\tcontainer.appendChild( txtCapacity );\n\n\t\t\t\t_displayNode.appendChild( container );\n\t\t\t});\n\n\t\t\tinsertSpacesBetweenPots();\n\n\t\t\t_container.appendChild( _displayNode );\n\n\t\t\treturn _displayNode;\n\t\t} \n\n\n\t\tfunction insertSpacesBetweenPots()\n\t\t{\n\t\t\tvar pots = [].slice.call(_displayNode.children);\n\n\t\t\tvar l = pots.length;\n\n\t\t\tfor ( var i = 1; i  < l; i++ )\n\t\t\t{\n\t\t\t\tvar space = document.createElement( \"span\" );\n\t\t\t\tspace.innerHTML = ' ';\n\t\t\t\t_displayNode.insertBefore( space, pots[i]);\n\t\t\t}\n\t\t}\n\n\t    function updatePot( potData )\n        {\n        \tconsole.log( \"PotDisplayController::Filling \" + potData.id + \" with \" + potData.contents + \"/\" + potData.capacity + \" of \" + potData.product );\n\n            var potContents = _potContents[ potData.id ].pot;\n            var potTextContents = _potContents[ potData.id ].text;\n\n            potTextContents.innerHTML = parseInt(potData.contents);\n\n            if ( potData.contents < potData.minimum )\n            {\n\t\t\t\tpotTextContents.className += \" warningText\";\n            }\n\n            potContents.setAttribute( \"data-product\", potData.product );\n\n            potContents.style.height = Math.round( potData.contents / potData.capacity * 100 ) + \"%\";\n        }\n\n\t\tfunction update( withProductData )\n\t\t{\n\n\t\t}\t\n\n\t\tfunction clear()\n\t\t{\n\t\t\t_potContents = [];\n\n\t\t\tif ( _displayNode )\n\t\t\t{\n\t\t\t\twhile( _displayNode.firstChild )\n\t\t\t\t{\n\t\t\t\t\t_displayNode.removeChild( _displayNode.firstChild );\n\t\t\t\t}\n\n\t\t\t\t_displayNode.parentNode.removeChild( _displayNode );\n\t\t\t\t_displayNode = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset()\n\t\t{\n\t\t\tfor ( var potId in _potContents )\n\t\t\t{\n\t\t\t\tif ( _potContents.hasOwnProperty( potId ))\n\t\t\t\t{\t\n\t\t\t\t\t_potContents[ potId ].pot.setAttribute('data-product','none');\n\t\t\t\t\t_potContents[ potId ].pot.style.height = 0;\n\n\t\t\t\t\t_potContents[ potId ].text.innerHTML = 0;\n\t\t\t\t\t_potContents[ potId ].className = \"potText\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n}());",
    "(function()\n{\n\tmodule.exports = function PotInputController( usingDom, availableProducts )\n\t{\n\t\tvar _domElement \t= usingDom;\n\t\tvar _inputGroups\t= [].slice.call( _domElement.querySelectorAll( \"[id^='input']\" ));\n\t\tvar _products\t\t= availableProducts;\n\n\t\tinit( availableProducts );\n\n\t\tif ( _inputGroups.length === 0 )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::No inputs\");\n\t\t}\n\n\t\treturn { \tinit: init,\n\t\t\t\t\tupdateProductList: updateProductList };\n\n\t\tfunction getEnteredProductAmounts( putLast )\n        {\n        \tvar lastProduct;\n\n        \tvar selectedProducts = _inputGroups.map( function getProductAmounts( inputGroup ) \n                {\n\t\t\t\t\tvar amount = inputGroup.querySelector(\"[id^=productInput\").value;\n\n                \t//if ( amount < 1000 ) amount = potifyNumber( amount );\n\n                    return {    id      :inputGroup.getAttribute(\"id\").split(\"_\")[1], \n                                amount  :potifyNumber( amount ) };\n                })\n\n                .filter( function removeZeroValues( inputValues )\n                {\n                    if ( inputValues.amount > 0 ) return true;                                  \t\n                })\n                .filter( function removeSpecificProduct( inputValues )\n                {\n                \tif ( inputValues.id === putLast )\n                \t{\n                \t\tlastProduct = inputValues;\n                \t\treturn false;                \t\t\n                \t} \n\n                \treturn true;\n                });\n\n            //if ( lastProduct ) selectedProducts.push( lastProduct );\n            if ( lastProduct ) selectedProducts.unshift( lastProduct );\n\n            return selectedProducts;\n        }\n\n        function updateProductList( availableProducts )\n        {\n        \tvar usedProductIds = availableProducts.reduce( function getProductIds( list, nextProduct )\n\t\t\t{\n\t\t\t\treturn list + ' ' + nextProduct.id;\n\t\t\t},'');\n\n        \tconsole.log(\"PotInputController:: checking inputs against \" + usedProductIds );\n\n        \t_inputGroups.forEach( function hideUnusedProducts( inputGroup )\n\t\t\t{\n\t\t\t\tvar forProduct \t\t= inputGroup.id.split('_')[1];\n\t\t\t\tvar txtInput        = inputGroup.querySelector(\"[id^=productInput]\");\n            \ttxtInput.value      = 0;\n\n\n\t\t\t\tif ( usedProductIds.indexOf( forProduct ) < 0 )\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Hiding \" + forProduct );\n\t\t\t\t\tinputGroup.style.display = \"none\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Showing \" + forProduct );\n\t\t\t\t\tinputGroup.style.display = \"block\";\n\t\t\t\t}\n\t\t\t});\n        }\n\n\t\tfunction init( availableProducts )\n\t\t{\n\t\t\tupdateProductList( availableProducts );\n\n\t\t\t_inputGroups.forEach( function( inputGroup )\n\t\t\t{\n\t\t\t\tinputGroup.addEventListener(\"click\", function( evt )\n\t\t            {\n\t\t            \tvar isFillBtn\t= evt.target.id.split(\"_\")[0] === \"btnFill\";\n\t\t            \tvar isClearBtn \t= evt.target.id.split(\"_\")[0] === \"btnClear\";\n\n\t\t                if ( isFillBtn )\n\t\t                {\tevt.stopPropagation();\n\t\t                \tonFillTanker( this );\t                    \n\t\t                \treturn;\n\t\t                }\n\n\t\t                if ( isClearBtn )\n\t\t                {\n\t\t                \tevt.stopPropagation();\n\t\t                \tonClearProduct( this );\n\t\t                \treturn;\n\t\t                }\n\t\t            });\n\n\t\t\t\tinputGroup.addEventListener(\"input\", function( evt )\n\t\t\t\t{\n\t\t\t\t\tif ( evt.target.id.split(\"_\")[0] === \"productInput\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t\t\tonPotTanker( this );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tfunction onFillTanker( selectedInputGroup )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::onFillTanker()\");\n\n\t\t\tvar txtInput        = selectedInputGroup.querySelector(\"[id^=productInput]\");\n            txtInput.value      = 0;\n            var productToFill   = selectedInputGroup.id.split( \"_\" )[ 1 ];\n            var otherProducts\t= getEnteredProductAmounts();\n\n            var detail\t\t\t= { enteredProducts:otherProducts, productToFill:productToFill };\n\n\t\t\tvar fillEvent \t\t= new CustomEvent(\"fillTanker\",{ detail:detail });\n\n            _domElement.dispatchEvent( fillEvent );\n\t\t}\n\n\t\tfunction onPotTanker( selectedInputGroup )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::onPotTanker()\");\n\n\t\t\tvar txtInput        = selectedInputGroup.querySelector(\"[id^=productInput]\");\n            var productToFill   = selectedInputGroup.id.split( \"_\" )[ 1 ];\n            var enteredProducts\t= getEnteredProductAmounts( productToFill );\n\n            if ( txtInput.value < 1000 ) return;\n\n            console.log(\"After Sort:\" + enteredProducts );\n\n            var detail\t\t\t= { enteredProducts : enteredProducts };\n\n\t\t\tvar fillEvent \t\t= new CustomEvent( \"potTanker\",{ detail:detail });\n\n            _domElement.dispatchEvent( fillEvent );\n\t\t}\n\n\t\tfunction onClearProduct( selectedInputGroup )\n\t\t{\n\t\t\tconsole.log(\"PotInputController::onClearProduct()\");\n\t\t\tvar txtInput        = selectedInputGroup.querySelector(\"[id^=productInput]\");\n            txtInput.value      = 0;\n\n            var enteredProducts\t= getEnteredProductAmounts();\n\n            var evt;\n            var detail = { enteredProducts : enteredProducts };\n\n            if ( enteredProducts.length === 0 )\n            {\n            \tevt = new CustomEvent(\"clearTanker\");\n            }\n            else\n            {\n            \tevt = new CustomEvent(\"potTanker\", { detail:detail } );\n            }\n\n            _domElement.dispatchEvent( evt );\n\t\t}\n\n\t\tfunction potifyNumber( number )\n\t\t{\n\t\t\tvar numberLength = String( Number( number ) ).length;\n\n\t\t\tif ( String( Number( number ) ).length >= 4 ) return number;\n\n\t\t\treturn Math.ceil( Number('.' + number ).toFixed( 4 ) * 10000 );\n\t\t}\n\t};\n}());",
    "\n(function()\n{\n\t\"use strict\";\n\n\tvar Utils \t\t\t= require(\"./Utils.js\");\n\tvar PottingSetList\t= require(\"./PottingSetList.js\");\n\n\tmodule.exports = function PottingController( listOfPots )\n\t{\n\t    var _basePots   = listOfPots;\n\t    var _activePots,_products;\n\t    \n\t    return {\n\t        doPottingWithProduct   : doPottingWithProduct\n\t    };\n\n\t    function doPottingWithProduct( withProduct, withPots )\n\t    {\n\t        _activePots             = withPots;        \n\n\t        var productNotPotted \t= 0;\n\t        var pottingUsed;\t\t\t//PottingSet;\n\t        var usedPottingSet      = '';\n\n\t         var spaceAvailable     = _activePots.reduce( function ( count, potData )\n\t         {\n\t            return count + potData.capacity;\n\t         }, 0 );\n\n\t         if ( spaceAvailable < withProduct.amount )\n\t         {\n\t            withProduct.amount \t= spaceAvailable;\n\t            productNotPotted \t= withProduct.amount - spaceAvailable;\n\t         }\n\n\t        pottingUsed = getBestPotsForProduct( _activePots, withProduct );\n\n\t        return { pottingUsed:pottingUsed, remainder: productNotPotted };\n\t    }\n\n\t    function getBestPotsForProduct( withPots, product )\n\t    {\n\t        var allPotPermutations  = Utils.getPotPermutations( withPots );\n\n\t        var allPottingSets      = new PottingSetList( allPotPermutations );\n\t        //var allPottingSets      = new PottingSetList( [JSON.parse(JSON.stringify(withPots)), JSON.parse( JSON.stringify( withPots.reverse() ))] );\n\t        //var allPottingSets      = new PottingSetList( [ JSON.parse( JSON.stringify( withPots ))]);\n\t        var uniquePottingSets   = allPottingSets.sendProductToPottingSets( product );\n\n\t        var bestPottingSet      = allPottingSets.getBestPottingSet();\n\t        \n\t        return bestPottingSet;\n\t    }\n\t};\n}());",
    "(function()\n{\n\tvar PRODUCT_DATA_URL \t= './resources/products.json?' + Math.random().toFixed(4);\n\t\n\tvar Terminal \t\t\t= require('./data/Terminal.js');\n\n\tvar availableProducts \t= [   \t{id:1051510, density:0.83,name:\"Blah\"},\n\t                                {id:1051485, density:0.83,name:\"Blah\"},\n\t                                {id:1051643, density:0.83,name:\"Blah\"}] ;\n\n    var products    \t\t= [     {id:\"1051512\", amount:22800, pottingUsed:[] },\n\t\t\t\t\t\t\t\t\t{id:\"1051510\", amount:12000, pottingUsed:[] }];\n\n    var basePots    \t\t= [     {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n\t\t                            {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n\t\t                            {id:3,capacity:7000, contents:0, product:\"\", minimum:3500},\n\t\t                            {id:4,capacity:7600, contents:0, product:\"\", minimum:3800},\n\t\t                            {id:5,capacity:6000, contents:0, product:\"\", minimum:3000},\n\t\t                            {id:6,capacity:7000, contents:0, product:\"\", minimum:6000}];\n\n\tvar testPots\t\t    =  [    {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800}];\n\n\tvar testProduct \t\t=       {id:\"1051510\", amount:18000, pottingUsed:[] };\n\tvar _terminals;\n\n\tmodule.exports = PottingData;\n\n\tfunction PottingData()\n\t{\t\n\t\t_terminals = [];\n\n\t\treturn { \tloadProductData: loadProductData,\n\t\t\t\t\tgetTerminalData: getTerminalData };\n\t}\n\n\tfunction getTerminalData( terminalName )\n\t{\n\t\treturn _terminals[terminalName];\n\t}\n\n\tfunction onProductDataLoaded( data, onComplete )\n\t{\n\t\tvar terminalData = JSON.parse( data );\n\t\tconsole.log('onProductDataLoaded');\n\t\tconsole.log(terminalData);\n\t\tfor ( var id in terminalData )\n\t\t{\n\t\t\tif ( terminalData.hasOwnProperty( id ) )\n\t\t\t{\n\t\t\t\tvar terminal = new Terminal( id, terminalData[id]);\n\t\t\t\t_terminals[id] = terminal;\t\n\t\t\t\tconsole.log( _terminals[id].toString());\n\t\t\t}\n\t\t}\n\n\t\tif ( onComplete )\tonComplete();\n\t}\n\n\tfunction loadProductData( onComplete )\n\t{\n\t\tvar xobj = new XMLHttpRequest();\n        xobj.overrideMimeType( \"application/json\" );\n    \txobj.open( 'GET', PRODUCT_DATA_URL, true ); \n    \t\n    \txobj.onreadystatechange = function () \n    \t{\n\n          if ( xobj.readyState === 4 && xobj.status === 200 ) {\n            onProductDataLoaded( xobj.responseText, onComplete );\n          }\n    \t};\n\n    \txobj.send( null );  \n\t}\n\n\n}());\n",
    "(function(){\n\n\tvar SUCCESS \t= 1;\n\tvar ERROR\t\t= -1;\n\tvar\tWARN\t\t= 0;\n\n\tvar pottedProducts = {};\n\n\tmodule.exports = PottingResults;\n\n\tfunction PottingResults()\n\t{\n\t\treturn {\n\t\t\tgetPottingResults: getPottingResults\n\t\t};\n\n\t\t/*return {\n\t\t\tnoPotsLeft: \t\tnoPotsLeft,\n\t\t\tpottingSuccess: \tpottingSuccess,\n\t\t\tpottingFail: \t\tpottingFail, \n\t\t\tpottedSomeProduct: \tpottedSomeProduct,\n\t\t\toverMaxWeight: \t\toverMaxWeight,\n\t\t\tisAlreadyPotted: \tisAlreadyPotted,\n\t\t\tclearResults: \t\tclearResults\n\t\t};*/\n\t}\n\n\tfunction getPottingResults( forProduct, result  )\n\t{\n\t\tvar message;\n\n\t\tvar usedPottingSet = result.pottingUsed;\n\n\t\tif ( usedPottingSet.isValid() )\n\t\t{\n\t\t\tif ( forProduct.remainder > 0 || result.remainder > 0 )\n\t\t\t{\n\t\t\t\tmessage = pottedSomeProduct( forProduct, usedPottingSet.getUsedPots() );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmessage = pottingSuccess( forProduct, usedPottingSet.getUsedPots() );\t\t\t\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmessage = pottingFail( forProduct, usedPottingSet.getUsedPots() );\n\t\t}\n\n\t\treturn message;\n\t}\n\n\n\tfunction clearResults()\n\t{\n\t\tpottedProducts = {};\n\t}\n\n\tfunction getPottedProducts()\n\t{\n\t\treturn; \n\t}\n\n\tfunction isAlreadyPotted( product, availablePots )\n\t{\n\n\t\t/*\n\t\tif ( pottedProduct.hasOwnProperty( product.id ) )\n\t\t{\n\t\t\tvar cachedResults = pottedProduct[ product.id ];\n\n\t\t\tif ( product.amount !== cachedResults.amount )\n\t\t\t{\n\t\t\t\tdelete cachedResults[ product.id ];\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar potsNeeded\t= cachedResults.potsUsed.length;\n\t\t\tvar foundPots\t= 0;\n\n\t\t\tavailablePots.forEach( function( potDetails )\n\t\t\t{\n\t\t\t\tif ( potsNeeded.indexOf( potDetails.id ) !== -1 )\n\t\t\t\t{\n\t\t\t\t\tfoundPots++ ;\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tif ( cachedResults.potsUsed !== usedPotIds )\n\t\t\t{\n\t\t\t\tdelete cachedResults[ product.id ];\n\t\t\t\treturn false;\t\t\t\t\n\t\t\t}\n\n\t\t\treturn cachedResults;\n\t\t}\n\t\t*/\n\t\treturn false;\n\t}\n\n\tfunction overMaxWeight( product, limitTo )\n\t{\n\t\tvar data \t\t\t= {};\n\t\tdata.product \t\t= product.id;\n\t\tdata.pottingStatus \t= this.ERROR;\n\t\tdata.message \t\t= product.amount + \" of \" + product.id + \" is over max allowed weight. Reducing to \" + limitTo;\n\n\t\treturn data;\n\t}\n\n\tfunction noPotsLeft( product )\n\t{\n\t\tvar data \t\t\t= {};\n\t\tdata.product \t\t= product.id;\n\t\tdata.pottingStatus \t= this.ERROR;\n\t\tdata.message \t\t= \"Could not pot \" + product.amount + \" of \" + product.id + \". No Pots left on tanker\";\n\n\t\treturn data;\n\t}\n\n\tfunction pottingFail( product, pots )\n\t{\n\t\tvar failedPot \t\t= pots[ pots.length - 1 ];\n\t\tvar amountNeeded \t= failedPot.minimum - failedPot.contents;\n\n\t\tvar data \t\t\t= {};\n\t\tdata.product\t\t= product.id;\n\t\tdata.amount \t\t= product.amount;\n\t\tdata.pottingStatus \t= this.ERROR;\n\t\tdata.potsUsed\t\t= pots.join('');\n\t\tdata.message \t\t= \"Could not pot \" + product.amount + \" of \" + product.id;\n\t\tdata.message \t\t+= \"Need \" + amountNeeded + \"L more in Pot \" + failedPot.id;\n\n\t\treturn data;\n\t}\n\n\tfunction pottingSuccess( product, pots )\n\t{\n\t\t/*var potsUsed = pots.reduce( function(id, pot )\n\t\t{\n\t\t\treturn id + pot.id + \" \";\n\t\t},'');*/\n\n\t\tvar data \t\t\t= {};\n\t\tdata.product\t\t= product.id;\n\t\tdata.amount \t\t= product.amount;\n\t\tdata.pottingStatus \t= this.SUCCESS;\n\t\tdata.potsUsed\t\t= pots.join('');\n\t\tdata.message \t\t= product.id + \" successfully potted in pots \" + data.potsUsed;\n\n\t\treturn data;\n\t}\n\n\tfunction pottedSomeProduct( product, pots )\n\t{\n\t\tvar data \t\t\t= {};\n\t\tdata.product\t\t= product.id;\n\t\tdata.amount \t\t= product.amount;\n\t\tdata.remainder\t\t= product.remainder;\n\t\tdata.pottingStatus \t= this.WARN;\n\t\tdata.message \t\t= product.amount + \" of \" + product.id + \" put into pots \" + pots.join(' & ');\n\t\tdata.message \t\t+= \". \" + product.remainder  + \" could not be potted.\";\n\n\t\treturn data;\n\t}\n}());\t",
    "/* globals debugger:false */\n(function()\n{\n\t\"use strict\";\n\tvar PotSorter = require(\"./Utils.js\").PotSorter;\n\t\n\tmodule.exports = function PottingSet( fromPotArr )\n\t{\n\t    var _availablePots = fromPotArr;\n\n\t    return {\n\t        putProductIntoPots      : putProductIntoPots,\n\t        getUsedPotsById         : getUsedPotsById,\n\t        getRemainingSpace       : getRemainingSpace,\n\t        getUsedPots             : getUsedPots,\n\t        isValid                 : isValid\n\t    };\n\n\t    function getUsedPots()\n\t    {\n\t        return _availablePots;\n\t    }\n\n\t    function isValid()\n\t    {\n\t        var valid = _availablePots.reduce( checkPotCapacityAgainstContents, true );\n\n\t        if ( valid )\n\t        {\n\t            return true;\n\t        } \n\t        else\n\t        {\n\t        \tvar fillData = getPotToFix();\n\t            return fixLastPot( fillData.potToFill, fillData.otherPots );\n\t        }\n\t    }\n\n\t    function checkPotCapacityAgainstContents( isWithinRules, potData )\n\t    {\n\t    \tvar willPot = potData.contents >= potData.minimum;\n\n\t        return isWithinRules && willPot;\n\t    }\n\n\t    function fillSinglePot( withProduct, pot )\n\t    {\n\t        pot.product = withProduct.id;\n\n\t        if ( pot.capacity > withProduct.amount )\n\t        {\n\t            pot.contents = withProduct.amount;\n\n\t            return withProduct.amount;\n\t        }\n\t        else\n\t        {\n\t            pot.contents = pot.capacity;\n\t            withProduct.amount -= pot.capacity;\n\t            return pot.capacity;\n\t        }\n\t    }\n\n\t    function putProductIntoPots( product )\n\t    {\n\t        var usedPots = [];\n\n\t        _availablePots.forEach( function( nextPot )\n\t        {\n\t            if ( product.amount > 0 ) \n\t            {\n\t                product.amount -= fillSinglePot( product, nextPot );\n\t                usedPots.push( nextPot );\n\t            }\t        \n\t        });\n\n\t        _availablePots = usedPots;\n\t    }\n\n\t    function getRemainingSpace()\n\t    {\n\t        return _availablePots.reduce( function( count, nextPot )\n\t        {\n\t           //return count + nextPot.getCapacity() - nextPot.getContents();\n\t           return count + nextPot.capacity - nextPot.contents;\n\t        }, 0);\n\t    }\n\n\t    function getUsedPotsById()\n\t    {\n\t        _availablePots.sort( PotSorter.sortPotsById );\n\t        \n\t        return _availablePots.reduce( function( idList , nextPot  )\n\t        {\n\t            //return idList + nextPot.getId();\n\t            return idList + nextPot.id;\n\t        }, '');\n\t    }\n\n\t    function getPotToFix()\n\t    {\n\t    \tvar potToFill;\n\t    \tvar pot;\n\t    \tvar otherPots = [];\n\t    \t\n\t    \tfor ( var i = _availablePots.length - 1; i >= 0; i--) \n\t    \t{\n\t    \t\tpot = _availablePots[i];\n\n\t    \t\tif ( pot.contents >= pot.minimum )\n\t    \t\t{\n\t    \t\t\totherPots.push( pot );\n\t    \t\t}\n\t    \t\telse\n\t    \t\t{\n\t    \t\t\tif ( potToFill )\n\t    \t\t\t{\n\t    \t\t\t\tdebugger;\n\t    \t\t\t\tconsole.log(\"SOMETHIGN HAS GONE WRONG!!\");\n\t    \t\t\t}\n\n\t    \t\t\tpotToFill = pot;\n\t    \t\t}\n\t    \t}\n\n\t    \treturn {potToFill:potToFill, otherPots:otherPots};\n\t    }\n\n\t    function fixLastPot( lastPot, remainingPots)\n\t    {\n\t\t\tvar needed = lastPot.minimum - lastPot.contents;\n\n\t        var amountToMove;\n\t        var helperPot;\n\n\t        remainingPots.sort( PotSorter.sortPotsByAmountMoveable );\n\n\t        for ( var i = 0; i < remainingPots.length; i++ )\n\t        {\n\t            helperPot = remainingPots[i];\n\n\t            if ( helperPot.contents - needed > helperPot.minimum )\n\t            {\n\t                amountToMove = helperPot.contents - ( helperPot.contents - needed );\n\t            } \n\t            else\n\t            {\n\t                amountToMove = helperPot.contents  - helperPot.minimum;\n\t            }\n\n\t            needed              -= amountToMove;\n\t            helperPot.contents  -= amountToMove;\n\t            lastPot.contents    += amountToMove;\n\n\t            if ( lastPot.contents >= lastPot.minimum ) \n\t            {\n\t            \treturn true;\t                \n\t            }\n\t        }\n\n\t        return false;\n\t    }\n\t};\n}());",
    "(function()\n{\n\t\"use strict\";\n\t\n\tvar PotSorter = require('./Utils.js').PotSorter;\n\tvar PottingSet = require('./PottingSet.js');\n\n\tmodule.exports = function PottingSetList( withListOfPots )\n\t{\n\t   var _listOfPottingSets = withListOfPots.map( function( potArray ) \n\t    {\n\t        return new PottingSet( potArray );\n\t    });\n\n\t   var _validPottingSets;\n\n\t    return {\n\t        sendProductToPottingSets    : sendProductToPottingSets,\n\t        getBestPottingSet:getBestPottingSet \n\t    };\n\n\t    function removeDuplicates()\n\t    {\n\t        var uniquePotCombos = [];\n\t        var listOfPotCombos = {};\n\n\t        var debugCounter = 0;\n\n\t        _listOfPottingSets.forEach ( function( pottingSet )\n\t        {\n\t            debugCounter++;\n\n\t            var usedPotIds = pottingSet.getUsedPotsById();\n\n\t            if ( listOfPotCombos[ usedPotIds ] )\n\t            {\n\t                listOfPotCombos[ usedPotIds ].push( pottingSet );\n\t            }\n\t            else\n\t            {\n\t                listOfPotCombos[ usedPotIds ] = [ pottingSet ];\n\t                uniquePotCombos.push( pottingSet );\n\t            }   \n\t        });\n\n\t        _listOfPottingSets = uniquePotCombos;\n\t    }\n\n\t    function sendProductToPottingSets( product, potCombinations )\n\t    {  \n\t        _listOfPottingSets.forEach( function( pottingSet )\n\t        {  \n\t        \tpottingSet.putProductIntoPots( {id:product.id, amount:product.amount });\n\t        });\n\n\t        removeDuplicates();\n\t        removeInvalid();\n\n\t        //getBestPottingSet();\n\t        _listOfPottingSets.sort( PotSorter.sortPotSetsByRemainder );\n\n\t        return _listOfPottingSets;\n\t    }\n\n\t    function removeInvalid()\n\t    {\n\t        _validPottingSets = _listOfPottingSets.filter( function( pottingSet )\n\t        {\n\t            if ( pottingSet.isValid() )\n\t            {\n\t                return true;\n\t            }\n\t        });\n\n\t        _validPottingSets.sort( PotSorter.sortPotSetsByRemainder );\n\t    }\n\n\t    function getBestPottingSet()\n\t    {\n\t    \tif ( _validPottingSets.length > 0 )\n\t    \t{\n\t    \t\treturn _validPottingSets[ 0 ];\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t//best failure;\n\t    \t\t_listOfPottingSets.sort( PotSorter.sortPotSetsByRemainder );\n\t    \t\treturn _listOfPottingSets[ 0 ];\n\t    \t}\n\t\t}\n\t};\n}());",
    "(function()\n{\n\tmodule.exports = Tabs;\n\n\tfunction Tabs( domNode )\n\t{\n\t\tvar _tabs = [];\n\t\tvar _domElement;\n\n\t\tinit( domNode );\n\n\t\t//return { init: init };\n\n\t\tfunction init( withDom )\n\t\t{\n\t\t\t_domElement = withDom;\n\n\t\t\t_tabs = [].slice.call( _domElement.querySelectorAll('li'));\n\n\t\t\t_tabs.forEach( function( tab )\n\t\t\t{\n\t\t\t\ttab.addEventListener('click', function( evt )\n\t\t\t\t{\n\t\t\t\t\tonTabClicked( evt );\t\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tfunction onTabClicked( evt )\n\t\t{\n\t\t\t_tabs.forEach( function( tab )\n\t\t\t{\n\t\t\t\ttab.className = '';\n\t\t\t});\n\n\t\t\tevt.currentTarget.className = 'tabActive';\n\t\t\tvar terminal = evt.currentTarget.id.split(\"_\")[1];\n\n\t\t\tvar changeEvent = new CustomEvent(\"onChangeTerminal\",{detail:terminal});\n\n\t\t\t_domElement.dispatchEvent( changeEvent );\n\t\t}\n\t}\n}());",
    "(function()\n{\n\t\"use strict\";\n\t\n\texports.getPotPermutations =  function getPotPermutations( fromList )\n\t{\n\t    var permArr     = [];\n\t    var usedChars   = [];\n\n\t    function permute( input ) \n\t    {\n\t        var i, ch;\n\n\t        for (i = 0; i < input.length; i++ ) \n\t        {\n\t            ch = input.splice(i, 1)[0];\n\t            usedChars.push(ch);\n\n\t            if ( input.length === 0 ) \n\t            {\n\t                permArr.push( JSON.parse( JSON.stringify( usedChars )));\n\t            }\n\n\t            permute( input );\n\t            \n\t            input.splice(i, 0, ch);\n\t            usedChars.pop();\n\t        }\n\t        \n\t        return permArr;\n\t    }\n\n\t    return permute( fromList );\n\t};\n\n    exports.filterRemainingPots = function( usedPots, availablePots )\n    {\n    \tvar usedPotIds = usedPots.reduce( function( idString, potData )\n\t\t{\t\n\t\t\treturn idString + potData.id;\n    \t}, '');\n\n        return availablePots.filter( function( potData )\n        {\n            if (  usedPotIds.indexOf( potData.id ) === -1 )\n            {\n                return true;\n            }\n        });\n    };\n\n\n\n\texports.PotSorter = {\n\n\t    sortPotsByAmountMoveable: function sortPotSetByAmountMoveable( aPot, bPot )\n\t    {\n\t        return ( bPot.capacity - bPot.minimum ) - ( aPot.capacity - aPot.minimum );\n\t    },\n\n\t    sortPotsById: function sortPotSetById( a, b )\n\t    {        \n\t        return a.id - b.id;\n\t    },\n\n\t    sortPotSetsByRemainder: function sortPotSetsByRemainder( aPottingList, bPottingList  )\n\t    {   \n\t        return aPottingList.getRemainingSpace() - bPottingList.getRemainingSpace();\n\t    }\n\t};\n}());",
    "(function()\n{\n\tmodule.exports = ViewController;\n\n\tvar PotDisplayController    = require(\"./PotDisplayController.js\");\n    var PotInputController      = require(\"./PotInputController.js\");\n    var Tabs                    = require('./Tabs.js');\n\n\tvar _formController;\n\tvar _pottingDisplay;\n\tvar _tabController;\n\tvar _tabs;\n\n\tvar _domElements;\n\n\tfunction ViewController( withDom )\n\t{\n\t\t_domElements = withDom;\n\n\t\treturn { \tinit: \t\t\tinit, \n\t\t\t\t\tupdateTerminal: updateTerminal,\n\t\t\t\t\tshowResults: \tshowResults };\n\t}\n\n\tfunction updatePotting( potDataArray )\n\t{\n\t\t\n\t}\n\n\tfunction showResults( potDataArray, messages  )\n\t{\n\t\t_pottingDisplay.reset();\n\n\t\tif ( potDataArray )\n\t\t{\n\t\t\tpotDataArray.forEach( function( singlePotData )\n\t        {\n\t            _pottingDisplay.updatePot( singlePotData );\n\t        });\n\t\t}\n\t}\n\n\tfunction updateTerminal( withPots, withProducts )\n\t{\n\t\t_formController.updateProductList( withProducts );\n\t\t_pottingDisplay.clear();\n\t\t_pottingDisplay.init( withPots );\n\t}\n\n\tfunction init( usingPots, usingProducts )\n\t{\n\t\tvar formNode        = _domElements.querySelector(\"#productInputs\");\n\t\tvar potDisplayNode  = _domElements.querySelector(\"#pottingContainer\");\n\t\tvar tabsNode\t\t= _domElements.querySelector(\".tabs\");\n\n\t\t_formController \t= new PotInputController( formNode, usingProducts );\n\t\t_pottingDisplay     = new PotDisplayController( potDisplayNode );\n\t\t_tabs \t\t\t\t= new Tabs( tabsNode );\n       \n\t\tupdateTerminal( usingPots, usingProducts );\n       \t\n       \ttabsNode.addEventListener(\"onChangeTerminal\", onChangeTerminal );\n        formNode.addEventListener(\"clearTanker\", onClearTankerSelected );\n\t}\n\n\tfunction onChangeTerminal( evt )\n\t{\n\t\tconsole.log(\"Changed!\" + evt.detail);\n\t}\n\n\n\tfunction onClearTankerSelected( evt )\n\t{\n\t    console.log(\"Removing Product from tanker. Products Left: \");\n\t    _pottingDisplay.reset();\n\t}\n}());\n",
    "/* globals PottingSetList:false, PottingController:false \n# sourceMappingURL=./app.js.map\n*/\n(function()\n{   \n            var PottingController       = require(\"./PottingController.js\");\n            var PottingData             = require('./PottingData.js');\n            var ViewController          = require(\"./ViewController.js\");\n            var PottingResults          = require(\"./PottingResults.js\");\n            var Utils                   = require(\"./Utils.js\");\n            \n            var potter;\n            var data;\n            var view;\n            var currentTerminal;\n            var results;\n\n            window.onload   = function()\n            {\n                data            = new PottingData();\n                view            = new ViewController( document.querySelector(\".content\") );\n                results         = PottingResults();\n\n                data.loadProductData( onProductDataLoaded );\n                \n                document.querySelector(\"#productInputs\").addEventListener(\"fillTanker\", onFillTankerSelected );\n                document.querySelector(\"#productInputs\").addEventListener(\"potTanker\", onPotTankerSelected );                \n                document.querySelector(\".tabs\").addEventListener(\"onChangeTerminal\", onChangeTerminal );\n            };\n\n            function onChangeTerminal( evt )\n            {\n                console.log(\"Changing terminal to \" + evt.detail );\n\n                currentTerminal = data.getTerminalData( evt.detail );\n\n                potter          = new PottingController( currentTerminal.pots );\n                    \n                view.updateTerminal( currentTerminal.pots, currentTerminal.products );\n            }\n\n            function onProductDataLoaded( )\n            {\n                console.log(\"Product Data Loaded!!\");\n                currentTerminal = data.getTerminalData(\"bramhall\");\n\n                potter          = new PottingController( currentTerminal.pots );\n\n                view.init( currentTerminal.pots, currentTerminal.products );\n            }\n\n            \n            //Filling all pots with single product. Invoked when Fill Balance is selected with no other product values entered.\n            function onFillTankerSelected( evt )\n            {\n                var weightUsed = 0;\n\n                evt.detail.enteredProducts.forEach( function( productData )\n                {\n                    weightUsed += productData.amount * currentTerminal.getProductData( productData.id ).density;\n                });\n\n                var litresAvailable = ( currentTerminal.getMaxWeight() - weightUsed ) * ( 1 / currentTerminal.getProductData( evt.detail.productToFill ).density );\n\n                evt.detail.enteredProducts.push( { id: evt.detail.productToFill, amount: litresAvailable });\n\n                console.log(\"Filling Tanker With: \" + litresAvailable + \" of \" + evt.detail.productToFill );    \n\n                onPotTankerSelected( evt );                \n\n                //potProduct( {id:evt.detail.productToFill, amount:amountToFill }, currentTerminal.pots.slice() );\n            }\n\n            function getPotString( pots )\n            {\n                return pots.reduce( function( debugString, potData )\n                {   \n                    return debugString+ \"[\" + potData.id +\"]:\" + potData.contents + \"/\" + potData.capacity + \" \" + potData.product;\n                },'');\n            }\n\n            function potProduct( product, pots )\n            {\n                var pottingUsed = potter.doPottingWithProduct( {id:product.productToFill, amount:product.amountToFill }, pots );\n                var bestPotting = pottingUsed[ 0 ];\n\n                view.updatePotting( bestPotting.getUsedPots() );\n            }\n\n            function onPotTankerSelected( evt )\n            {\n                var products        = evt.detail.enteredProducts;\n                var availablePots   = currentTerminal.pots.slice();\n                var messages        = [];\n                var allUsedPots     = [];\n                var currentWeight   = 0;\n                \n                var currentUsedPots;                \n                var bestPottingSet;\n                var pottingResult;\n\n                view.showResults( null );\n\n                products.forEach( function( productDetails )\n                {\n                    console.log(\"onPotTankerSelected()::Potting \" + productDetails.id + \" using \" + availablePots.join(\" & \"));\n\n                    if ( availablePots.length === 0 ) return;\n\n                    productDetails      = currentTerminal.checkWeight( productDetails, currentWeight );\n\n                    pottingResult       = potter.doPottingWithProduct( productDetails, availablePots.slice() );\n                    currentUsedPots     = pottingResult.pottingUsed.getUsedPots();\n\n                    messages.push( results.getPottingResults( productDetails, pottingResult ) );\n\n                    currentWeight       += currentUsedPots.reduce( function reduceToProductWeight( total, potData )\n                    {\n                        return total + potData.contents * currentTerminal.getProductData( potData.product ).density;\n                    }, 0 );\n\n                    allUsedPots         = allUsedPots.concat( currentUsedPots );                    \n                    availablePots       = Utils.filterRemainingPots( allUsedPots, availablePots );\n                });\n\n                //view.updatePotting( filledPots );\n\n                view.showResults( allUsedPots, messages );\n            }\n\n           /* function checkWeight( productToPot, alreadyPotted )\n            {\n                var currentWeight = alreadyPotted.reduce( function countProductWeight(total, product )\n                {\n                    return total + product.amount * currentTerminal.getProductData( product.id ).density;\n                },0);\n\n                var toPotDensity =  currentTerminal.getProductData( productToPot.id ).density;\n\n                if ( toPotDensity * productToPot.amount + currentWeight > currentTerminal.getMaxWeight() )\n                {\n                    var litresAvailable = Math.max( currentTerminal.getMaxWeight() - currentWeight, 0 ) / toPotDensity;   // * ( 1 / toPotDensity );\n                    \n                    productToPot.remainder = productToPot.amount - litresAvailable;\n                    productToPot.amount = litresAvailable;\n                }\n\n                return productToPot;\n            }*/\n\n                    /*var alreadyPotted = results.isAlreadyPotted( productDetails, availablePots );\n\n                    if ( alreadyPotted )\n                    {\n                        messages.push( alreadyPotted );\n                        return;\n                    }\n\n                    if ( availablePots.length === 0 )\n                    {\n                        messages.push( results.noPotsLeft( productDetails ));\n                        return;\n                    }\n\n                    var usedPottingSet = potter.doPottingWithProduct( productDetails, availablePots.slice() );\n                    var potsUsed = usedPottingSet.getUsedPots();\n\n\n\n                    if ( usedPottingSet.isValid() )\n                    {\n                        messages.push( results.pottingSuccess( productDetails, potsUsed  ));\n                    }\n                    else\n                    {\n                        messages.push( results.pottingFail( productDetails, potsUsed ));\n                    }\n\n                    usedPotIds          = usedPottingSet.getUsedPotsById();\n\n                    filledPots  = filledPots.concat( potsUsed );\n\n                    availablePots       = availablePots.filter( function getRemainingPots( potData )\n                    {\n                        if (  usedPotIds.indexOf( potData.id ) === -1 )\n                        {\n                            return true;\n                        }\n                    });                     \n                });\n\n                view.updatePotting( filledPots );\n                //view.showResults( messages );\n                \n            }*/\n}());            ",
    "(function()\n{\t\n\n            /*var basePots    = [     {id:1,capacity:7600, contents:0, product:\"\", minimum:7500},\n                                    {id:2,capacity:7600, contents:0, product:\"\", minimum:6600},\n                                    {id:3,capacity:7000, contents:0, product:\"\", minimum:3500},\n                                    {id:4,capacity:7600, contents:0, product:\"\", minimum:3800},\n                                    {id:5,capacity:6000, contents:0, product:\"\", minimum:3000},\n                                    {id:6,capacity:7000, contents:0, product:\"\", minimum:6000}];*/\n\n\tmodule.exports = Terminal;\n\n\n\n\n\tfunction Terminal( id, data )\n\t{\n\t\tthis.name \t\t= id;\n\t\tthis.pots \t\t= [];\n\t\tthis.products \t= {};\n\n\t\tthis.potIds \t= '';\n\t\tthis.productIds = '';\n\n\t\tfor ( var i = 0; i < data.pot_configs[0].pots.length; i++ )\n\t\t{\n\t\t\tthis.pots.push({\tid: i+1,\n\t\t\t\t\t\t\t\tcapacity:this.potifyNumber( data.pot_configs[0].pots[i] ),\n\t\t\t\t\t\t\t\tcontents:0,\n\t\t\t\t\t\t\t\tproduct:'',\n\t\t\t\t\t\t\t\tminimum:this.potifyNumber( data.pot_configs[0].potMinimums[ i ] )\n\t\t\t\t\t\t\t});\n\n\t\t\tthis.potIds += data.pot_configs[0].pots[i];\n\t\t}\n\n\t\tthis.products = [];//data.products;\n\n\t\tfor ( var product in data.products )\n\t\t{\n\t\t\tif ( data.products.hasOwnProperty(product))\n\t\t\t{\n\t\t\t\tthis.products.push({id:product, name:data.products[product].name,density:data.products[product].density });\n\t\t\t\tthis.productIds += product + \" \";\n\t\t\t}\n\t\t}\n\t}\n\n\t//Convert 3 to 3000, 69 to 6900 etc\n\tTerminal.prototype.potifyNumber = function( number )\n\t{\n\t\tif ( String( Number( number ) ).length === 4 ) return number;\n\n\t\treturn Math.ceil( Number('.' + number ).toFixed(4) * 10000 );\n\t};\n\n\tTerminal.prototype.toString = function()\n\t{\n\t\tvar s = \"-------\" + this.name +\"-------\\n\";\n\t\ts+= \"Pots: \" + this.potIds + \"\\n\";\n\t\ts+= \"Products: \" + this.productIds + \"\\n\";\n\t\t\n\t\treturn s;\n\t};\n\n\tTerminal.prototype.getMaxWeight = function()\n\t{\n\t\treturn 30000;\n\t};\n\n\n\tTerminal.prototype.getProductData = function( forProduct )\n\t{\n\t\tfor ( var i = 0; i < this.products.length;i++ )\n\t\t{\n\t\t\tif ( this.products[i].id === forProduct )\n\t\t\t{\n\t\t\t\treturn this.products[i];\n\t\t\t}\n\t\t}\n\t};\n\n\tTerminal.prototype.getTankerCapacity = function()\n\t{\n\t\tvar capacity = this.pots.reduce( function( amount, potData )\n\t\t{\n\t\t\treturn amount + potData.capacity;\n\t\t},0);\n\n\t\treturn capacity;\n\t};\n\n\tTerminal.prototype.checkWeight = function( productToPot, currentWeight )\n\t{\n        var toPotDensity =  this.getProductData( productToPot.id ).density;\n\n        if ( toPotDensity * productToPot.amount + currentWeight > this.getMaxWeight() )\n        {\n            var litresAvailable = Math.max( this.getMaxWeight() - currentWeight, 0 ) *  ( 1 / toPotDensity );   // * ( 1 / toPotDensity );\n            \n            productToPot.remainder = productToPot.amount - litresAvailable;\n            productToPot.amount = litresAvailable;\n        }\n\n        return productToPot;\n\t};\n\n}());"
  ]
}